-- misc.sql : test miscellaneous functions
--
-----------------------------
-- emaj_reset_group() test
-----------------------------
-- group is unknown in emaj_group_def
select emaj.emaj_reset_group(NULL);
ERROR:  emaj_reset_group: group "<NULL>" has not been created.
select emaj.emaj_reset_group('unknownGroup');
ERROR:  emaj_reset_group: group "unknownGroup" has not been created.
-- group not in logging state
select emaj.emaj_reset_group('myGroup1');
ERROR:  emaj_reset_group: Group "myGroup1" cannot be reset because it is in LOGGING state. An emaj_stop_group function must be previously executed.
-- stop group
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

-- log tables are not yet empty
select count(*) from emaj.myschema1_mytbl1_log;
 count 
-------
    18
(1 row)

select count(*) from emaj.myschema1_mytbl2_log;
 count 
-------
     2
(1 row)

select count(*) from emajb.myschema1_mytbl2b_log;
 count 
-------
     2
(1 row)

select count(*) from "emajC"."myschema1_myTbl3_log";
 count 
-------
    10
(1 row)

select count(*) from emaj.myschema1_mytbl4_log;
 count 
-------
     1
(1 row)

-- should be OK
select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                6
(1 row)

select count(*) from emaj.myschema1_mytbl1_log;
 count 
-------
     0
(1 row)

select count(*) from emaj.myschema1_mytbl2_log;
 count 
-------
     0
(1 row)

select count(*) from emajb.myschema1_mytbl2b_log;
 count 
-------
     0
(1 row)

select count(*) from "emajC"."myschema1_myTbl3_log";
 count 
-------
     0
(1 row)

select count(*) from emaj.myschema1_mytbl4_log;
 count 
-------
     0
(1 row)

-- test the "no initial mark" error message for the emaj_gen_sql_group()
--   this test has been moved here because, the emaj_reset_group() function cannot be used into a transaction
select emaj.emaj_gen_sql_group('myGroup1', NULL, NULL, NULL);
ERROR:  _gen_sql_groups: No initial mark can be found for group "myGroup1".
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
-- start myGroup1
select emaj.emaj_start_group('myGroup1','Mark21');
 emaj_start_group 
------------------
                6
(1 row)

-----------------------------
-- log updates on myschema2 between 3 mono-group and multi-groups marks 
-----------------------------
set search_path=public,myschema2;
-- set a multi-groups mark
select emaj.emaj_set_mark_groups(array['myGroup1','myGroup2'],'Multi-1');
 emaj_set_mark_groups 
----------------------
                   14
(1 row)

-- inserts/updates/deletes in myTbl1, myTbl2 and myTbl2b (via trigger)
insert into myTbl1 select i, 'ABC', E'\\014'::bytea from generate_series (1,10100) as i;
update myTbl1 set col13=E'\\034'::bytea where col11 <= 500;
delete from myTbl1 where col11 > 10000;
insert into myTbl2 select i, 'DEF', current_date from generate_series (1,900) as i;
-- set marks
select emaj.emaj_set_mark_group('myGroup2','Mark22');
 emaj_set_mark_group 
---------------------
                   8
(1 row)

select emaj.emaj_set_mark_groups(array['myGroup1','myGroup2'],'Multi-2');
 emaj_set_mark_groups 
----------------------
                   14
(1 row)

-- inserts/updates/deletes in myTbl3 and myTbl4
insert into "myTbl3" (col33) select generate_series(1000,1039,4)/100;
insert into myTbl4 select i,'FK...',i,1,'ABC' from generate_series (1,100) as i;
-- set marks
select emaj.emaj_set_mark_group('myGroup2','Mark23');
 emaj_set_mark_group 
---------------------
                   8
(1 row)

select emaj.emaj_set_mark_groups(array['myGroup1','myGroup2'],'Multi-3');
 emaj_set_mark_groups 
----------------------
                   14
(1 row)

-----------------------------
-- emaj_log_stat_group() and emaj_detailled_log_stat_group() test
-----------------------------
-- group is unknown in emaj_group_def
select * from emaj.emaj_log_stat_group(NULL,NULL,NULL);
ERROR:  emaj_log_stat_group: group "<NULL>" has not been created.
select * from emaj.emaj_log_stat_group('unknownGroup',NULL,NULL);
ERROR:  emaj_log_stat_group: group "unknownGroup" has not been created.
select * from emaj.emaj_detailed_log_stat_group(NULL,NULL,NULL);
ERROR:  emaj_detailed_log_stat_group: group "<NULL>" has not been created.
select * from emaj.emaj_detailed_log_stat_group('unknownGroup',NULL,NULL);
ERROR:  emaj_detailed_log_stat_group: group "unknownGroup" has not been created.
-- invalid marks
select * from emaj.emaj_log_stat_group('myGroup2','dummyStartMark',NULL);
ERROR:  emaj_log_stat_group: Start mark "dummyStartMark" is unknown for group "myGroup2".
select * from emaj.emaj_log_stat_group('myGroup2',NULL,'dummyEndMark');
ERROR:  emaj_log_stat_group: End mark "dummyEndMark" is unknown for group "myGroup2".
select * from emaj.emaj_detailed_log_stat_group('myGroup2','dummyStartMark',NULL);
ERROR:  emaj_detailed_log_stat_group: Start mark "dummyStartMark" is unknown for group "myGroup2".
select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'dummyEndMark');
ERROR:  emaj_detailed_log_stat_group: End mark "dummyEndMark" is unknown for group "myGroup2".
-- start mark > end mark
-- just check the error is trapped, because the error message contents timestamps
create function test_log(v_groupName TEXT, v_firstMark TEXT, v_lastMark TEXT) returns void language plpgsql as 
$$
begin
  begin
    perform count(*) from emaj.emaj_log_stat_group(v_groupName,v_firstMark,v_lastMark);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_log_stat_group() call';
  end;
  begin
    perform count(*) from emaj.emaj_detailed_log_stat_group(v_groupName,v_firstMark,v_lastMark);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_detailed_log_stat_group() call';
  end;
  return;
end;
$$;
select test_log('myGroup2','Mark23','Mark22');
NOTICE:  Error trapped on emaj_log_stat_group() call
NOTICE:  Error trapped on emaj_detailed_log_stat_group() call
 test_log 
----------
 
(1 row)

select test_log('myGroup2','EMAJ_LAST_MARK','Mark22');
NOTICE:  Error trapped on emaj_log_stat_group() call
NOTICE:  Error trapped on emaj_detailed_log_stat_group() call
 test_log 
----------
 
(1 row)

drop function test_log(text,text,text);
-- should be ok
select * from emaj.emaj_log_stat_group('myGroup2',NULL,NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark21',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark21','EMAJ_LAST_MARK')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2',NULL,'Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |         0
 myGroup2   | myschema2   | mytbl4     |         0
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark22','Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |         0
 myGroup2   | myschema2   | mytbl2     |         0
 myGroup2   | myschema2   | myTbl3     |         0
 myGroup2   | myschema2   | mytbl4     |         0
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark22','Mark23')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |         0
 myGroup2   | myschema2   | mytbl2     |         0
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','EMAJ_LAST_MARK','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |         0
 myGroup2   | myschema2   | mytbl2     |         0
 myGroup2   | myschema2   | myTbl3     |         0
 myGroup2   | myschema2   | mytbl4     |         0
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21','EMAJ_LAST_MARK')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
(4 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark22','Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
(0 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark22','Mark23')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(2 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','EMAJ_LAST_MARK','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
(0 rows)

-- groups without any mark
begin;
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

  select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                6
(1 row)

  select * from emaj.emaj_log_stat_group('myGroup1',NULL,NULL);
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup1   | myschema1   | myTbl3     |         0
 myGroup1   | myschema1   | mytbl1     |         0
 myGroup1   | myschema1   | mytbl4     |         0
 myGroup1   | myschema1   | mytbl2     |         0
 myGroup1   | myschema1   | mytbl2b    |         0
(5 rows)

  select * from emaj.emaj_detailed_log_stat_group('myGroup1',NULL,NULL);
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
(0 rows)

rollback;
-----------------------------
-- emaj_estimate_rollback_group() and emaj_estimate_rollback_groups() tests
-----------------------------
-- group is unknown in emaj_group_def
select emaj.emaj_estimate_rollback_group(NULL,NULL,FALSE);
ERROR:  _rlbk_check: group "<NULL>" has not been created.
CONTEXT:  SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],text,boolean) line 16 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 8 at RETURN
select emaj.emaj_estimate_rollback_group('unknownGroup',NULL,TRUE);
ERROR:  _rlbk_check: group "unknownGroup" has not been created.
CONTEXT:  SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],text,boolean) line 16 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 8 at RETURN
select emaj.emaj_estimate_rollback_groups('{"myGroup2","unknownGroup"}',NULL,TRUE);
ERROR:  _rlbk_check: No mark "<NULL>" exists for group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],text,boolean) line 16 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_groups(text[],text,boolean) line 8 at RETURN
-- invalid marks
select emaj.emaj_estimate_rollback_group('myGroup2','dummyMark',TRUE);
ERROR:  _rlbk_check: No mark "dummyMark" exists for group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],text,boolean) line 16 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 8 at RETURN
select emaj.emaj_estimate_rollback_groups(array['myGroup1','myGroup2'],'Mark21',TRUE);
ERROR:  _rlbk_check: Mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],text,boolean) line 16 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_groups(text[],text,boolean) line 8 at RETURN
-- group not in logging state
begin;
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

  select emaj.emaj_estimate_rollback_group('myGroup1','Mark11',FALSE);
ERROR:  _rlbk_check: Group "myGroup1" is not in LOGGING state.
CONTEXT:  SQL statement "SELECT emaj._rlbk_check(v_groupNames, v_mark)"
PL/pgSQL function emaj._estimate_rollback_groups(text[],text,boolean) line 16 at SQL statement
PL/pgSQL function emaj.emaj_estimate_rollback_group(text,text,boolean) line 8 at RETURN
rollback;
-- insert 1 timing parameters (=> so use 3 default values)
INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_step_rollback_duration','2.5 millisecond'::interval);
-- analyze tables to get proper reltuples statistics
vacuum analyze myschema2.mytbl4;
select reltuples from pg_class, pg_namespace where relnamespace=pg_namespace.oid and relname = 'mytbl4' and nspname = 'myschema2';
 reltuples 
-----------
       100
(1 row)

-- estimate with empty rollback statistics and default parameters
delete from emaj.emaj_rlbk_stat;
-- estimates with empty rollback statistics but 1 temporarily modified parameter ; no table to rollback
begin;
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_table_rollback_duration','1.4 millisecond'::interval);
  select emaj.emaj_estimate_rollback_group('myGroup2','EMAJ_LAST_MARK',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 0.0112 secs
(1 row)

-- should return 0.011200 sec
rollback;
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 1.4251 secs
(1 row)

-- should return 1.425100 sec
-- estimates with empty rollback statistics but temporarily modified parameters
begin;
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_row_rollback_duration','150 microsecond'::interval);
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_row_delete_log_duration','12 microsecond'::interval);
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_fkey_check_duration','27 microsecond'::interval);
  UPDATE emaj.emaj_param SET param_value_interval = '7 millisecond'::interval WHERE param_key = 'fixed_step_rollback_duration';
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_dblink_rollback_duration','2.5 millisecond'::interval);
  select emaj.emaj_estimate_rollback_groups('{"myGroup2"}','Mark21',TRUE);
 emaj_estimate_rollback_groups 
-------------------------------
 @ 1.8607 secs
(1 row)

-- should return 1.860700 sec
rollback;
-- estimate with added rollback statistics about fkey drops, recreations and checks
--   drop the foreign key on emaj_rlbk_stat to easily temporarily insert dummy rows
alter table emaj.emaj_rlbk_stat drop constraint emaj_rlbk_stat_rlbt_rlbk_id_fkey;
insert into emaj.emaj_rlbk_stat values
  ('DROP_FK','','','',1,1,'0.003 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('ADD_FK','myschema2','mytbl4','mytbl4_col44_fkey',1,300,'0.036 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('SET_FK_IMM','myschema2','mytbl4','mytbl4_col43_fkey',1,2000,'0.030 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DROP_FK','','','',2,1,'0.0042 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('ADD_FK','myschema2','mytbl4','mytbl4_col44_fkey',2,200,'0.020 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('SET_FK_IMM','myschema2','mytbl4','mytbl4_col43_fkey',2,1200,'0.015 SECONDS'::interval);
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 1.440962 secs
(1 row)

-- should return 1.440962 sec
-- estimate with added statistics about tables rollbacks
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl1','',1,5350,'1.000 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl2','',1,100,'0.004 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl2','',2,200,'0.010 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl2','',3,20000,'1.610 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','myTbl3','',1,99,'0.004 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','myTbl3','',2,101,'0.008 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('RLBK_TABLE','myschema2','mytbl4','',1,50000,'3.600 SECONDS'::interval);
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 2.309566 secs
(1 row)

-- should return 2.309566 sec
-- estimate with added statistics about log deletes and CTRLxDBLINK pseudo steps
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl1','',1,5350,'0.250 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl2','',1,150,'0.001 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl2','',2,200,'0.003 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl2','',3,20000,'1.610 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','myTbl3','',1,99,'0.001 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','myTbl3','',2,151,'0.002 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('DELETE_LOG','myschema2','mytbl4','',1,50000,'0.900 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('CTRL+DBLINK','','','',1,10,'0.005 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('CTRL-DBLINK','','','',2,10,'0.035 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('CTRL-DBLINK','','','',3,10,'0.025 SECONDS'::interval);
select emaj.emaj_estimate_rollback_group('myGroup2','Mark21',FALSE);
 emaj_estimate_rollback_group 
------------------------------
 @ 2.675653 secs
(1 row)

-- should return 2.675653 sec
-- estimate with 2 groups and a SET_FK_DEF step
vacuum analyze myschema1.mytbl4;
select reltuples from pg_class, pg_namespace where relnamespace=pg_namespace.oid and relname = 'mytbl4' and nspname = 'myschema1';
 reltuples 
-----------
         1
(1 row)

begin;
-- temporarily insert new rows into myTbl4 of myschema1
  insert into myschema1.myTbl4 select i,'FK...',2,1,'ABC' from generate_series (10,20) as i;
  select emaj.emaj_estimate_rollback_groups('{"myGroup1","myGroup2"}','Multi-1',FALSE);
 emaj_estimate_rollback_groups 
-------------------------------
 @ 2.728023 secs
(1 row)

-- should return 2.728023 sec
rollback;
-- delete all manualy inserted rollback statistics, cleanup the statistics table and recreate its foreign key
delete from emaj.emaj_rlbk_stat;
vacuum emaj.emaj_rlbk_stat;
alter table emaj.emaj_rlbk_stat add FOREIGN KEY (rlbt_rlbk_id) REFERENCES emaj.emaj_rlbk (rlbk_id);
-----------------------------
-- emaj_snap_group() and  emaj_snap_log_group() test
-----------------------------
-- set/reset directory for snaps
\! mkdir -p /tmp/emaj_test/snaps
\! rm -R /tmp/emaj_test/snaps
\! mkdir /tmp/emaj_test/snaps
-- group is unknown in emaj_group_def
select emaj.emaj_snap_group(NULL,NULL,NULL);
ERROR:  emaj_snap_group: group "<NULL>" has not been created.
select emaj.emaj_snap_group('unknownGroup',NULL,NULL);
ERROR:  emaj_snap_group: group "unknownGroup" has not been created.
-- invalid directory
select emaj.emaj_snap_group('myGroup1',NULL,NULL);
ERROR:  emaj_snap_group: directory parameter cannot be NULL
select emaj.emaj_snap_group('myGroup1','unknown_directory',NULL);
ERROR:  relative path not allowed for COPY to file
CONTEXT:  SQL statement "COPY (SELECT sequence_name, last_value, start_value, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO 'unknown_directory/myschema1_myTbl3_col31_seq.snap' "
PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 81 at EXECUTE statement
select emaj.emaj_snap_group('myGroup1','/unknown_directory',NULL);
ERROR:  could not open file "/unknown_directory/myschema1_myTbl3_col31_seq.snap" for writing: No such file or directory
CONTEXT:  SQL statement "COPY (SELECT sequence_name, last_value, start_value, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO '/unknown_directory/myschema1_myTbl3_col31_seq.snap' "
PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 81 at EXECUTE statement
-- invalid COPY TO options
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','dummy_option');
ERROR:  syntax error at or near "dummy_option"
LINE 1: .../emaj_test/snaps/myschema1_myTbl3_col31_seq.snap' dummy_opti...
                                                             ^
QUERY:  COPY (SELECT sequence_name, last_value, start_value, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO '/tmp/emaj_test/snaps/myschema1_myTbl3_col31_seq.snap' dummy_option
CONTEXT:  PL/pgSQL function emaj.emaj_snap_group(text,text,text) line 81 at EXECUTE statement
-- SQL injection attempt
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','; CREATE ROLE fake LOGIN PASSWORD '''' SUPERUSER');
ERROR:  emaj_snap_group: invalid COPY options parameter format
-- should be OK (even when executed twice, files being overwriten)
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','');
 emaj_snap_group 
-----------------
               6
(1 row)

select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','CSV HEADER DELIMITER '';'' ');
 emaj_snap_group 
-----------------
               6
(1 row)

\! ls /tmp/emaj_test/snaps
_INFO
myschema1_mytbl1.snap
myschema1_mytbl2b.snap
myschema1_mytbl2.snap
myschema1_myTbl3_col31_seq.snap
myschema1_myTbl3.snap
myschema1_mytbl4.snap
-- set/reset directory for log snaps
\! mkdir -p /tmp/emaj_test/log_snaps
\! rm -R /tmp/emaj_test/log_snaps
\! mkdir /tmp/emaj_test/log_snaps
-- group is unknown in emaj_group_def
select emaj.emaj_snap_log_group(NULL,NULL,NULL,NULL,NULL);
ERROR:  emaj_snap_log_group: group "<NULL>" has not been created.
select emaj.emaj_snap_log_group('unknownGroup',NULL,NULL,NULL,NULL);
ERROR:  emaj_snap_log_group: group "unknownGroup" has not been created.
-- invalid directory
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK',NULL,NULL);
ERROR:  emaj_snap_log_group: directory parameter cannot be NULL
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','unknown_directory',NULL);
ERROR:  relative path not allowed for COPY to file
CONTEXT:  SQL statement "COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11850 ORDER BY emaj_gid ASC) TO 'unknown_directory/myschema2_mytbl1_log.snap' "
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 118 at EXECUTE statement
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/unknown_directory',NULL);
ERROR:  could not open file "/unknown_directory/myschema2_mytbl1_log.snap" for writing: No such file or directory
CONTEXT:  SQL statement "COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11850 ORDER BY emaj_gid ASC) TO '/unknown_directory/myschema2_mytbl1_log.snap' "
PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 118 at EXECUTE statement
-- invalid start mark
select emaj.emaj_snap_log_group('myGroup2','unknownMark','EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps',NULL);
ERROR:  emaj_snap_log_group: Start mark "unknownMark" is unknown for group "myGroup2".
-- invalid end mark
select emaj.emaj_snap_log_group('myGroup2','','unknownMark','/tmp/emaj_test/log_snaps',NULL);
ERROR:  emaj_snap_log_group: End mark "unknownMark" is unknown for group "myGroup2".
-- start mark > end mark
-- just check the error is trapped, because the error message contents timestamps
create function test_snap_log(v_groupName TEXT, v_firstMark TEXT, v_lastMark TEXT) returns void language plpgsql as 
$$
begin
  begin
    perform emaj.emaj_snap_log_group(v_groupName,v_firstMark,v_lastMark,'/tmp/emaj_test/log_snaps',NULL);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_snap_log_group() call';
  end;
  return;
end;
$$;
select test_snap_log('myGroup2','Mark23','Mark21');
NOTICE:  Error trapped on emaj_snap_log_group() call
 test_snap_log 
---------------
 
(1 row)

select test_snap_log('myGroup2','EMAJ_LAST_MARK','Mark22');
NOTICE:  Error trapped on emaj_snap_log_group() call
 test_snap_log 
---------------
 
(1 row)

drop function test_snap_log(text,text,text);
-- invalid COPY TO options
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps', 'dummy_option');
ERROR:  syntax error at or near "dummy_option"
LINE 1: ...mp/emaj_test/log_snaps/myschema2_mytbl1_log.snap' dummy_opti...
                                                             ^
QUERY:  COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11850 ORDER BY emaj_gid ASC) TO '/tmp/emaj_test/log_snaps/myschema2_mytbl1_log.snap' dummy_option
CONTEXT:  PL/pgSQL function emaj.emaj_snap_log_group(text,text,text,text,text) line 118 at EXECUTE statement
-- SQL injection attempt
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps','; CREATE ROLE fake LOGIN PASSWORD '''' SUPERUSER');
ERROR:  emaj_snap_log_group: invalid COPY options parameter format
-- should be ok
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','','','/tmp/emaj_test/log_snaps','CSV');
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21',NULL,'/tmp/emaj_test/log_snaps','CSV HEADER');
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21','Mark21','/tmp/emaj_test/log_snaps','CSV');
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21','Mark23','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   8
(1 row)

\! ls /tmp/emaj_test/log_snaps |sed s/[0-9][0-9].[0-9][0-9].[0-9][0-9].[0-9][0-9][0-9]/\[timestamp_mask\]/g
_INFO
myGroup2_sequences_at_[timestamp_mask]
myGroup2_sequences_at_[timestamp_mask]
myGroup2_sequences_at_Mark21
myGroup2_sequences_at_Mark23
myGroup2_sequences_at_Multi-3
myschema2_mytbl1_log.snap
myschema2_mytbl2_log.snap
myschema2_myTbl3_log.snap
myschema2_mytbl4_log.snap
myschema2_mytbl5_log.snap
myschema2_mytbl6_log.snap
-----------------------------
-- emaj_gen_sql_group() and emaj_gen_sql_groups() test
-----------------------------
-- set/reset directory for snaps
\! mkdir -p /tmp/emaj_test/sql_scripts
\! rm -R /tmp/emaj_test/sql_scripts
\! mkdir /tmp/emaj_test/sql_scripts
-- group is unknown in emaj_group_def
select emaj.emaj_gen_sql_group(NULL, NULL, NULL, NULL);
WARNING:  _check_names_array: No group name to process.
CONTEXT:  PL/pgSQL function emaj._gen_sql_groups(text[],text,text,text,text[]) line 40 at assignment
SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
 emaj_gen_sql_group 
--------------------
                  0
(1 row)

select emaj.emaj_gen_sql_group('unknownGroup', NULL, NULL, NULL, NULL);
ERROR:  _gen_sql_groups: group "unknownGroup" has not been created.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_groups(NULL, NULL, NULL, NULL);
WARNING:  _check_names_array: No group name to process.
CONTEXT:  PL/pgSQL function emaj._gen_sql_groups(text[],text,text,text,text[]) line 40 at assignment
SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
 emaj_gen_sql_groups 
---------------------
                   0
(1 row)

select emaj.emaj_gen_sql_groups('{"myGroup1","unknownGroup"}', NULL, NULL, NULL);
ERROR:  _gen_sql_groups: group "unknownGroup" has not been created.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- the tables group contains a table without pkey
select emaj.emaj_gen_sql_group('phil''s group#3",', NULL, NULL, '/tmp/emaj_test/sql_scripts/Group3');
ERROR:  _gen_sql_groups: Tables group "phil's group#3"," contains tables without pkey (phil's schema3.myTbl2\).
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_groups(array['myGroup1','phil''s group#3",'], NULL, NULL, '/tmp/emaj_test/sql_scripts/Group3');
ERROR:  _gen_sql_groups: Tables group "phil's group#3"," contains tables without pkey (phil's schema3.myTbl2\).
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- invalid start mark
select emaj.emaj_gen_sql_group('myGroup2', 'unknownMark', NULL, NULL);
ERROR:  _gen_sql_groups: Begin mark "unknownMark" does not exist for group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_groups('{"myGroup1","myGroup2"}', 'Mark11', NULL, NULL, NULL);
ERROR:  _gen_sql_groups: Begin mark "Mark11" does not exist for group "myGroup1".
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- invalid end mark
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'unknownMark', NULL);
ERROR:  _gen_sql_groups: End mark "unknownMark" does not exist for group "myGroup2".
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_groups('{"myGroup1","myGroup2"}', NULL, 'Mark11', NULL);
ERROR:  _gen_sql_groups: End mark "Mark11" does not exist for group "myGroup1".
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- end mark is prior start mark
-- (mark timestamps are temporarily changed so that regression test can return a stable error message)
begin;
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 12:00:00+00' 
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_group = 'myGroup2' and mark_name = 'Mark21';
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 13:00:00+00'
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_group = 'myGroup2' and mark_name = 'Mark22';
  select emaj.emaj_gen_sql_group('myGroup2', 'Mark22', 'Mark21', NULL);
ERROR:  _gen_sql_groups: time stamp for "Mark22" (Sat Jan 01 05:00:00 2000 PST) is greater than for "Mark21" (Sat Jan 01 04:00:00 2000 PST).
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
rollback;
begin;
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 12:00:00+00'
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_name = 'Multi-2';
  update emaj.emaj_time_stamp set time_clock_timestamp = '2000-01-01 13:00:00+00'
    from emaj.emaj_mark
    where time_id = mark_time_id and mark_name = 'Multi-3';
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-3', 'Multi-2', NULL);
ERROR:  _gen_sql_groups: time stamp for "Multi-3" (Sat Jan 01 05:00:00 2000 PST) is greater than for "Multi-2" (Sat Jan 01 04:00:00 2000 PST).
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
rollback;
-- start mark with the same name but that doesn't correspond to the same point in time
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Mark21', 'Multi-2', NULL);
ERROR:  _gen_sql_groups: Begin mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], NULL, 'Multi-2', NULL, NULL);
ERROR:  _gen_sql_groups: Begin mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- end mark with the same name but that doesn't correspond to the same point in time
  select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', 'Mark21', NULL);
ERROR:  _gen_sql_groups: End mark "Mark21" does not represent the same point in time for all groups.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- empty table/sequence names array
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array['']);
ERROR:  _gen_sql_groups: filtered table/sequence names array cannot be empty.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
-- unknown table/sequence names in the tables filter
select emaj.emaj_gen_sql_group('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile', array['foo']);
ERROR:  _gen_sql_groups: some tables and/or sequences (foo) do not belong to any of the selected tables groups.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_group('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema1.mytbl1','myschema2.myTbl3_col31_seq','phil''s schema3.phil''s tbl1']);
ERROR:  _gen_sql_groups: some tables and/or sequences (myschema1.mytbl1, phil's schema3.phil's tbl1) do not belong to any of the selected tables groups.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', NULL, '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema1.mytbl1','foo','myschema2.myTbl3_col31_seq','phil''s schema3.phil''s tbl1']);
ERROR:  _gen_sql_groups: some tables and/or sequences (foo, phil's schema3.phil's tbl1) do not belong to any of the selected tables groups.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- invalid location path name
select emaj.emaj_gen_sql_group('myGroup1', NULL, NULL, NULL);
ERROR:  _gen_sql_groups: file "<NULL>" cannot be used as script output file.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_group('myGroup1', NULL, NULL, '/tmp/unknownDirectory/myFile');
ERROR:  _gen_sql_groups: file "/tmp/unknownDirectory/myFile" cannot be used as script output file.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(CASE WHEN v_groupName IS NOT NULL THEN array[v_groupName] ELSE NULL END, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_group(text,text,text,text,text[]) line 22 at SQL statement
select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', NULL, '/tmp/unknownDirectory/myFile');
ERROR:  _gen_sql_groups: file "/tmp/unknownDirectory/myFile" cannot be used as script output file.
CONTEXT:  SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
-- should be ok (generated files content is checked later in adm2.sql scenario)
-- (getting counters from detailed log statistics + the number of sequences included in the group allows a comparison with the result of emaj_gen_sql_group function)
select emaj.emaj_gen_sql_group('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,NULL);
 check 
-------
 11712
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', 'Mark21', NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21',NULL);
 check 
-------
 11712
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', NULL, 'Mark22', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11602
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'Mark22');
 check 
-------
 11602
(1 row)

select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_groups 
---------------------
               11713
(1 row)

select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-2', 'Multi-3', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_groups 
---------------------
                 113
(1 row)

select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'EMAJ_LAST_MARK');
 check 
-------
 11712
(1 row)

-- should be ok, with tables and sequences filtering
select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'EMAJ_LAST_MARK');
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

-- all tables and sequences
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl1','myschema2.mytbl2','myschema2.myTbl3','myschema2.mytbl4',
     'myschema2.mytbl5','myschema2.mytbl6','myschema2.myseq1','myschema2.myTbl3_col31_seq']);
 emaj_gen_sql_group 
--------------------
              11712
(1 row)

-- minus 1 sequence
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl1','myschema2.mytbl2','myschema2.myTbl3','myschema2.mytbl4',
     'myschema2.mytbl5','myschema2.mytbl6','myschema2.myseq1']);
 emaj_gen_sql_group 
--------------------
              11711
(1 row)

-- minus 1 table
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl1','myschema2.mytbl2','myschema2.myTbl3',
     'myschema2.mytbl5','myschema2.mytbl6','myschema2.myseq1']);
 emaj_gen_sql_group 
--------------------
              11611
(1 row)

-- only 1 sequence
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.myTbl3_col31_seq']);
 emaj_gen_sql_group 
--------------------
                  1
(1 row)

-- only 1 table
select emaj.emaj_gen_sql_group('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema2.mytbl4']);
 emaj_gen_sql_group 
--------------------
                100
(1 row)

-- several groups and 1 table of each, with redondancy in the tables array
select emaj.emaj_gen_sql_groups(array['myGroup1','myGroup2'], 'Multi-1', 'Multi-3', '/tmp/emaj_test/sql_scripts/myFile', array[
     'myschema1.mytbl4','myschema2.mytbl4','myschema1.mytbl4','myschema2.mytbl4']);
WARNING:  _check_names_array: duplicate table/sequence name "myschema1.mytbl4".
CONTEXT:  PL/pgSQL function emaj._gen_sql_groups(text[],text,text,text,text[]) line 49 at assignment
SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
WARNING:  _check_names_array: duplicate table/sequence name "myschema2.mytbl4".
CONTEXT:  PL/pgSQL function emaj._gen_sql_groups(text[],text,text,text,text[]) line 49 at assignment
SQL statement "SELECT emaj._gen_sql_groups(v_groupNames, v_firstMark, v_lastMark, v_location, v_tblseqs)"
PL/pgSQL function emaj.emaj_gen_sql_groups(text[],text,text,text,text[]) line 22 at SQL statement
 emaj_gen_sql_groups 
---------------------
                 100
(1 row)

\! grep 'only for' /tmp/emaj_test/sql_scripts/myFile
--    only for the following tables/sequences: myschema1.mytbl4,myschema2.mytbl4
-----------------------------
-- emaj_verify_all() test
-----------------------------
-- should be OK
select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

-- detection of unattended tables in E-Maj schemas
begin;
  create table emaj.dummy1_log (col1 int);
  create table emaj.dummy2 (col1 int);
  create table emajb.emaj_dummy (col1 int);
  create table emaj.emaj_dummy (col1 int);               -- this one is not detected
  select * from emaj.emaj_verify_all();
                                       emaj_verify_all                                        
----------------------------------------------------------------------------------------------
 In schema "emaj", the table "emaj"."dummy1_log" is not linked to any created tables group.
 In schema "emaj", the table "emaj"."dummy2" is not linked to any created tables group.
 In schema "emajb", the table "emajb"."emaj_dummy" is not linked to any created tables group.
(3 rows)

rollback;
-- detection of unattended functions in E-Maj schemas
begin;
  create function emaj.dummy1_log_fnct () returns int language sql as $$ select 0 $$;
  create function "emajC".dummy2_rlbk_fnct () returns int language sql as $$ select 0 $$;
  create function "emajC".dummy3_fnct () returns int language sql as $$ select 0 $$;
  create function emaj._dummy4_fnct () returns int language sql as $$ select 0 $$;      -- this one is not detected
  create function emaj.emaj_dummy5_fnct () returns int language sql as $$ select 0 $$;  -- this one is not detected
  select * from emaj.emaj_verify_all();
                                            emaj_verify_all                                            
-------------------------------------------------------------------------------------------------------
 In schema "emaj", the function "emaj"."dummy1_log_fnct" is not linked to any created tables group.
 In schema "emajC", the function "emajC"."dummy2_rlbk_fnct" is not linked to any created tables group.
 In schema "emajC", the function "emajC"."dummy3_fnct" is not linked to any created tables group.
(3 rows)

rollback;
-- detection of unattended sequences in E-Maj schemas
begin;
  create table emaj.dummy1_log (col1 serial);
NOTICE:  CREATE TABLE will create implicit sequence "dummy1_log_col1_seq" for serial column "dummy1_log.col1"
  create sequence emajb.dummy2_seq;
  create sequence emajb.dummy3_log_seq;
  create sequence emaj.emaj_dummy4_seq;                  -- this one is not detected
  select * from emaj.emaj_verify_all();
                                            emaj_verify_all                                             
--------------------------------------------------------------------------------------------------------
 In schema "emaj", the table "emaj"."dummy1_log" is not linked to any created tables group.
 In schema "emaj", the sequence "emaj"."dummy1_log_col1_seq" is not linked to any created tables group.
 In schema "emajb", the sequence "emajb"."dummy2_seq" is not linked to any created tables group.
 In schema "emajb", the sequence "emajb"."dummy3_log_seq" is not linked to any created tables group.
(4 rows)

rollback;
-- detection of unattended types in E-Maj schemas
begin;
  create type emaj.dummy1_type as (col1 int);
  create type emajb.dummy2_type as (col1 int);
  create type emajb.dummy3_type as (col1 int);
  create type emaj.emaj_dummy4_type as (col1 int);       -- this one is not detected
  select * from emaj.emaj_verify_all();
                               emaj_verify_all                                
------------------------------------------------------------------------------
 In schema "emaj", the type "emaj"."dummy1_type" is not an E-Maj component.
 In schema "emajb", the type "emajb"."dummy2_type" is not an E-Maj component.
 In schema "emajb", the type "emajb"."dummy3_type" is not an E-Maj component.
(3 rows)

rollback;
-- detection of unattended views in E-Maj schemas
begin;
  create view emaj.dummy1_view as select hist_id, hist_function, hist_event, hist_object from emaj.emaj_hist;
  create view emaj.dummy2_view as select hist_id, hist_function, hist_event, hist_object from emaj.emaj_hist;
  select * from emaj.emaj_verify_all();
                              emaj_verify_all                               
----------------------------------------------------------------------------
 In schema "emaj", the view "emaj"."dummy1_view" is not an E-Maj component.
 In schema "emaj", the view "emaj"."dummy2_view" is not an E-Maj component.
(2 rows)

rollback;
-- detection of unattended foreign tables in E-Maj schemas
-- (this only gives pertinent results with postgres 9.1+ version)
begin;
  create extension file_fdw;
  create foreign data wrapper file handler file_fdw_handler;
  create server file_server foreign data wrapper file;
  create foreign table emaj.dummy1_ftbl (ligne TEXT) server file_server options(filename '/tmp/emaj_test/log_snaps/_INFO');
  create foreign table emaj.dummy2_ftbl (ligne TEXT) server file_server options(filename '/tmp/emaj_test/log_snaps/_INFO');
  select * from emaj.emaj_verify_all();
                                   emaj_verify_all                                   
-------------------------------------------------------------------------------------
 In schema "emaj", the foreign table "emaj"."dummy1_ftbl" is not an E-Maj component.
 In schema "emaj", the foreign table "emaj"."dummy2_ftbl" is not an E-Maj component.
(2 rows)

rollback;
-- detection of unattended domains in E-Maj schemas
begin;
  create domain "emajC".dummy1_domain as int check (VALUE > 0);
  create domain "emajC".dummy2_domain as int check (VALUE > 0);
  select * from emaj.emaj_verify_all();
                                 emaj_verify_all                                  
----------------------------------------------------------------------------------
 In schema "emajC", the domain "emajC"."dummy1_domain" is not an E-Maj component.
 In schema "emajC", the domain "emajC"."dummy2_domain" is not an E-Maj component.
(2 rows)

rollback;
-- tests on groups errors
-- detection of too old group
begin;
  update emaj.emaj_group set group_pg_version = '8.0.0' where group_name = 'myGroup1';
  select * from emaj.emaj_verify_all();
                                                      emaj_verify_all                                                      
---------------------------------------------------------------------------------------------------------------------------
 The group "myGroup1" has been created with a non compatible postgresql version (8.0.0). It must be dropped and recreated.
(1 row)

rollback;
-- detection of a missing application schema
begin;
  drop schema myschema1 cascade;
NOTICE:  drop cascades to 6 other objects
DETAIL:  drop cascades to table myschema1.mytbl2
drop cascades to table myschema1."myTbl3"
drop cascades to table myschema1.mytbl4
drop cascades to table myschema1.mytbl2b
drop cascades to function myschema1.mytbl2trgfct()
drop cascades to table myschema1.mytbl1
  select * from emaj.emaj_verify_all();
                                      emaj_verify_all                                      
-------------------------------------------------------------------------------------------
 The application schema "myschema1" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl1" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl2" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl2b" does not exist any more.
 In group "myGroup1", the table "myschema1"."myTbl3" does not exist any more.
 In group "myGroup1", the sequence "myschema1"."myTbl3_col31_seq" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more.
(7 rows)

rollback;
-- detection of a missing application relation
begin;
  drop table myschema1.mytbl4;
  select * from emaj.emaj_verify_all();
                               emaj_verify_all                                
------------------------------------------------------------------------------
 In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more.
(1 row)

rollback;
-- detection of relation type change (a table is now a sequence!)
begin;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1';
  select * from emaj.emaj_verify_all();
                                 emaj_verify_all                                 
---------------------------------------------------------------------------------
 In group "myGroup1", the sequence "myschema1"."mytbl1" does not exist any more.
(1 row)

rollback;
-- detection of a missing E-Maj secondary schema
begin;
  drop schema emajb cascade;
NOTICE:  drop cascades to 4 other objects
DETAIL:  drop cascades to table emajb.myschema1_mytbl2b_log
drop cascades to sequence emajb.myschema1_mytbl2b_log_seq
drop cascades to function emajb.myschema1_mytbl2b_log_fnct()
drop cascades to trigger emaj_log_trg on table myschema1.mytbl2b
  select * from emaj.emaj_verify_all();
                                         emaj_verify_all                                          
--------------------------------------------------------------------------------------------------
 The E-Maj schema "emajb" does not exist any more.
 In group "myGroup1", the log table "emajb"."myschema1_mytbl2b_log" is not found.
 In group "myGroup1", the log function "emajb"."myschema1_mytbl2b_log_fnct" is not found.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl2b" is not found.
(4 rows)

rollback;
-- detection of a missing log trigger
begin;
  drop trigger emaj_log_trg on myschema1.mytbl1;
  select * from emaj.emaj_verify_all();
                                         emaj_verify_all                                         
-------------------------------------------------------------------------------------------------
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found.
(1 row)

rollback;
-- detection of a missing log function (and trigger)
begin;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
NOTICE:  drop cascades to trigger emaj_log_trg on table myschema1.mytbl1
  select * from emaj.emaj_verify_all();
                                         emaj_verify_all                                         
-------------------------------------------------------------------------------------------------
 In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found.
(2 rows)

rollback;
-- detection of a missing truncate trigger
begin;
  drop trigger emaj_trunc_trg on myschema1.mytbl1;
  select * from emaj.emaj_verify_all();
                                            emaj_verify_all                                             
--------------------------------------------------------------------------------------------------------
 In group "myGroup1", the truncate trigger "emaj_trunc_trg" on table "myschema1"."mytbl1" is not found.
(1 row)

rollback;
-- detection of a missing log table
begin;
  drop table emaj.myschema1_mytbl1_log;
  select * from emaj.emaj_verify_all();
                                emaj_verify_all                                 
--------------------------------------------------------------------------------
 In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found.
(1 row)

rollback;
-- detection of a change in the application table structure (new column)
begin;
  alter table myschema1.mytbl1 add column newcol int;
  alter table myschema1.mytbl1 add column othernewcol text;
  alter table myschema1.mytbl2 add column newcol int;
  select * from emaj.emaj_verify_all();
                                                                   emaj_verify_all                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------
 In group "myGroup1", the structure of the application table "myschema1"."mytbl1" is not coherent with its log table ("emaj"."myschema1_mytbl1_log").
 In group "myGroup1", the structure of the application table "myschema1"."mytbl2" is not coherent with its log table ("emaj"."myschema1_mytbl2_log").
(2 rows)

rollback;
-- detection of a change in the application table structure (column type change)
begin;
  alter table myschema1.mytbl4 drop column col42;
  alter table myschema1.mytbl4 alter column col45 type varchar(15);
  select * from emaj.emaj_verify_all();
                                                                   emaj_verify_all                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------
 In group "myGroup1", the structure of the application table "myschema1"."mytbl4" is not coherent with its log table ("emaj"."myschema1_mytbl4_log").
(1 row)

rollback;
-- all in 1
begin;
  create table emaj.dummy_log (col1 int);
  create function emaj.dummy_log_fnct () returns int language sql as $$ select 0 $$;
  create function emaj.dummy_rlbk_fnct () returns int language sql as $$ select 0 $$;
  update emaj.emaj_group set group_pg_version = '8.0.0' where group_name = 'myGroup1';
  drop trigger emaj_log_trg on myschema1.mytbl1;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
  drop table emaj.myschema1_mytbl1_log;
  alter table myschema1.mytbl1 add column newcol int;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema2' and rel_tblseq = 'mytbl1';
  select * from emaj.emaj_verify_all();
                                                      emaj_verify_all                                                      
---------------------------------------------------------------------------------------------------------------------------
 In schema "emaj", the table "emaj"."dummy_log" is not linked to any created tables group.
 In schema "emaj", the function "emaj"."dummy_log_fnct" is not linked to any created tables group.
 In schema "emaj", the function "emaj"."dummy_rlbk_fnct" is not linked to any created tables group.
 The group "myGroup1" has been created with a non compatible postgresql version (8.0.0). It must be dropped and recreated.
 In group "myGroup2", the sequence "myschema2"."mytbl1" does not exist any more.
 In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found.
 In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found.
 In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found.
(8 rows)

rollback;
--------------------------------
-- User errors and recovery tests 
--------------------------------
SET client_min_messages TO WARNING;
-- cases when an application table is altered
begin;
  alter table myschema2.mytbl4 add column newcol int;
-- setting a mark or rollbacking fails
  savepoint sp1;
    select emaj.emaj_set_mark_group('myGroup2','dummyMark');
ERROR:  _verify_groups (6): In group "myGroup2", the structure of the application table "myschema2"."mytbl4" is not coherent with its log table ("emaj"."myschema2_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  SQL statement "SELECT 0 FROM emaj._verify_groups(array[v_groupName], true)"
PL/pgSQL function emaj.emaj_set_mark_group(text,text) line 27 at PERFORM
  rollback to savepoint sp1;
    select emaj.emaj_rollback_group('myGroup2','EMAJ_LAST_MARK');
ERROR:  _verify_groups (6): In group "myGroup2", the structure of the application table "myschema2"."mytbl4" is not coherent with its log table ("emaj"."myschema2_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._rlbk_init(text[],text,boolean,integer,boolean) line 26 at PERFORM
SQL statement "SELECT emaj._rlbk_init(v_groupNames, v_mark, v_isLoggedRlbk, 1, v_multiGroup)"
PL/pgSQL function emaj._rlbk_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_rollback_group(text,text) line 7 at RETURN
  rollback to savepoint sp1;
-- but it is possible to stop, drop and recreate the group
  select emaj.emaj_stop_group('myGroup2');
 emaj_stop_group 
-----------------
               8
(1 row)

  savepoint sp2;
    select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

    select emaj.emaj_create_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups (array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean) line 88 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups (array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean) line 88 at PERFORM
 emaj_create_group 
-------------------
                 8
(1 row)

  rollback to savepoint sp2;
-- or stop and alter the group
  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
 emaj_alter_group 
------------------
                8
(1 row)

rollback;
-- cases when an application table is dropped
begin;
  drop table myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: Table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

  select emaj.emaj_create_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups (array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean) line 88 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups (array[v_groupName])"
PL/pgSQL function emaj.emaj_create_group(text,boolean) line 88 at PERFORM
 emaj_create_group 
-------------------
                 7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when a log trigger on an application table is dropped
begin;
  drop trigger emaj_log_trg on myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: Log trigger "emaj_log_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Log trigger "emaj_log_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl2" is referenced by foreign key "mytbl4_col43_fkey" from table "myschema2.mytbl4" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl1" is referenced by foreign key "mytbl4_col44_fkey" from table "myschema2.mytbl4" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when a truncate trigger on an application table is dropped
begin;
  drop trigger emaj_trunc_trg on myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: Truncate trigger "emaj_trunc_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Truncate trigger "emaj_trunc_trg" on table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl2" is referenced by foreign key "mytbl4_col43_fkey" from table "myschema2.mytbl4" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl1" is referenced by foreign key "mytbl4_col44_fkey" from table "myschema2.mytbl4" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when an application sequence is dropped
begin;
  drop sequence myschema2.mySeq1;
-- setting a mark or stopping the group fails
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'myseq1';
  select emaj.emaj_force_stop_group('myGroup2');
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT emaj._check_fk_groups(array[v_groupName])"
PL/pgSQL function emaj.emaj_alter_group(text) line 225 at PERFORM
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when an application schema is dropped
begin;
  drop schema myschema2 cascade;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: Schema "myschema2" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to force the group's stop and drop the group
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Schema "myschema2" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
WARNING:  _stop_groups: Table "myschema2.mytbl1" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
WARNING:  _stop_groups: Table "myschema2.mytbl2" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
WARNING:  _stop_groups: Table "myschema2.myTbl3" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
WARNING:  _stop_groups: Table "myschema2.mytbl4" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
WARNING:  _stop_groups: Table "myschema2.mytbl5" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
WARNING:  _stop_groups: Table "myschema2.mytbl6" does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when non E-Maj related objects are stored in emaj secondary schemas
begin;
  create sequence emajb.dummySeq;
-- dropping group fails at secondary schema drop step
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

  savepoint sp1;
    select emaj.emaj_drop_group('myGroup1');
ERROR:  _drop_log_schema: cannot drop schema "emajb". It probably owns unattended objects. Use the emaj_verify_all() function to get details
CONTEXT:  SQL statement "SELECT emaj._drop_log_schema(r_schema.rel_log_schema, v_isForced)"
PL/pgSQL function emaj._drop_group(text,boolean) line 55 at PERFORM
SQL statement "SELECT emaj._drop_group(v_groupName, FALSE)"
PL/pgSQL function emaj.emaj_drop_group(text) line 12 at SQL statement
  rollback to savepoint sp1;
-- use emaj_verify_all() to understand the problem
  select * from emaj.emaj_verify_all();
                                        emaj_verify_all                                        
-----------------------------------------------------------------------------------------------
 In schema "emajb", the sequence "emajb"."dummyseq" is not linked to any created tables group.
(1 row)

-- use emaj_force_drop_group to solve the problem
  select emaj.emaj_force_drop_group('myGroup1');
 emaj_force_drop_group 
-----------------------
                     6
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-----------------------------
-- test event triggers
-----------------------------
-- disable twice event trigger (already disabled at the beginning of the createDrop.sql script)
select emaj.emaj_disable_protection_by_event_triggers();
 emaj_disable_protection_by_event_triggers 
-------------------------------------------
                                         0
(1 row)

-- enable twice
select emaj.emaj_enable_protection_by_event_triggers();
 emaj_enable_protection_by_event_triggers 
------------------------------------------
                                        0
(1 row)

select emaj.emaj_enable_protection_by_event_triggers();
 emaj_enable_protection_by_event_triggers 
------------------------------------------
                                        0
(1 row)

-- drop or alter various E-Maj components
--
-- drop application components (the related tables group is currently in logging state)
begin;
  drop table myschema1.mytbl1 cascade;
rollback;
begin;
  drop sequence myschema2.mySeq1;
rollback;
begin;
  drop schema myschema1 cascade;
rollback;
-- drop emaj components
begin;
  drop table "emajC"."myschema1_myTbl3_log";
rollback;
begin;
  drop sequence emaj.myschema1_mytbl1_log_seq;
rollback;
begin;
  drop function "emajC"."myschema1_myTbl3_log_fnct"() cascade;
rollback;
begin;
  drop trigger emaj_log_trg on myschema1.mytbl1;
rollback;
begin;
  drop schema emaj cascade;
rollback;
begin;
  drop schema emajb cascade;
rollback;
begin;
  drop extension emaj cascade;
rollback;
-- change a table structure that leads to a table rewrite
begin;
  alter table myschema1.mytbl1 add column newcol int default 1;
rollback;
begin;
  alter table emaj.myschema1_mytbl1_log add column newcol int default 1;
rollback;
-- rename a table and/or change its schema (not covered by event triggers in pg9.6-)
begin;
  alter table myschema1.mytbl1 rename to mytbl1_new_name;
  alter table myschema1.mytbl1_new_name set schema public;
  alter schema myschema1 rename to renamed_myschema1;
rollback;
-- change a table structure that doesn't lead to a table rewrite (not covered by event triggers in pg9.6-)
begin;
  alter table myschema1.mytbl1 add column another_newcol boolean;
rollback;
-- perform changes on application components with the related tables group stopped (the event triggers should accept)
begin;
  select emaj.emaj_stop_groups(array['myGroup1','myGroup2']);
 emaj_stop_groups 
------------------
               14
(1 row)

  alter table myschema1.mytbl1 add column newcol int default 1;
  drop table myschema1.mytbl1 cascade;
  drop sequence myschema2.mySeq1;
rollback;
-- missing event triggers
begin;
  drop event trigger emaj_protection_trg;
ERROR:  syntax error at or near "event"
LINE 1: drop event trigger emaj_protection_trg;
             ^
  select emaj.emaj_verify_all();
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- finaly leave the event triggers enabled
-----------------------------
-- test a table reclustering (it will use the pkey index as clustered index) and a vacuum full
-----------------------------
cluster emaj.myschema1_mytbl1_log;
vacuum full emaj.myschema1_mytbl1_log;
-----------------------------
-- test end: check, reset history and force sequences id
-----------------------------
select hist_id, hist_function, hist_event, hist_object, regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g'), hist_user from 
  (select * from emaj.emaj_hist order by hist_id) as t;
 hist_id |   hist_function    |       hist_event        |    hist_object    |                                                   regexp_replace                                                   | hist_user 
---------+--------------------+-------------------------+-------------------+--------------------------------------------------------------------------------------------------------------------+-----------
    5003 | STOP_GROUP         | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5004 | LOCK_GROUP         | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5005 | LOCK_GROUP         | END                     | myGroup1          | 5 tables locked, 0 deadlock(s)                                                                                     | postgres
    5006 | SET_MARK_GROUP     | BEGIN                   | myGroup1          | STOP_%                                                                                                             | postgres
    5007 | SET_MARK_GROUP     | END                     | myGroup1          | STOP_%                                                                                                             | postgres
    5008 | STOP_GROUP         | END                     | myGroup1          | 6 tables/sequences processed                                                                                       | postgres
    5009 | RESET_GROUP        | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5010 | RESET_GROUP        | END                     | myGroup1          | 6 tables/sequences processed                                                                                       | postgres
    5012 | START_GROUP        | BEGIN                   | myGroup1          | With log reset                                                                                                     | postgres
    5013 | LOCK_GROUP         | BEGIN                   | myGroup1          |                                                                                                                    | postgres
    5014 | LOCK_GROUP         | END                     | myGroup1          | 5 tables locked, 0 deadlock(s)                                                                                     | postgres
    5015 | SET_MARK_GROUP     | BEGIN                   | myGroup1          | Mark21                                                                                                             | postgres
    5016 | SET_MARK_GROUP     | END                     | myGroup1          | Mark21                                                                                                             | postgres
    5017 | START_GROUP        | END                     | myGroup1          | 6 tables/sequences processed                                                                                       | postgres
    5018 | SET_MARK_GROUPS    | BEGIN                   | myGroup1,myGroup2 | Multi-1                                                                                                            | postgres
    5019 | LOCK_GROUPS        | BEGIN                   | myGroup1,myGroup2 |                                                                                                                    | postgres
    5020 | LOCK_GROUPS        | END                     | myGroup1,myGroup2 | 11 tables locked, 0 deadlock(s)                                                                                    | postgres
    5021 | SET_MARK_GROUPS    | END                     | myGroup1,myGroup2 | Multi-1                                                                                                            | postgres
    5022 | SET_MARK_GROUP     | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5023 | LOCK_GROUP         | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5024 | LOCK_GROUP         | END                     | myGroup2          | 6 tables locked, 0 deadlock(s)                                                                                     | postgres
    5025 | SET_MARK_GROUP     | END                     | myGroup2          | Mark22                                                                                                             | postgres
    5026 | SET_MARK_GROUPS    | BEGIN                   | myGroup1,myGroup2 | Multi-2                                                                                                            | postgres
    5027 | LOCK_GROUPS        | BEGIN                   | myGroup1,myGroup2 |                                                                                                                    | postgres
    5028 | LOCK_GROUPS        | END                     | myGroup1,myGroup2 | 11 tables locked, 0 deadlock(s)                                                                                    | postgres
    5029 | SET_MARK_GROUPS    | END                     | myGroup1,myGroup2 | Multi-2                                                                                                            | postgres
    5030 | SET_MARK_GROUP     | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5031 | LOCK_GROUP         | BEGIN                   | myGroup2          |                                                                                                                    | postgres
    5032 | LOCK_GROUP         | END                     | myGroup2          | 6 tables locked, 0 deadlock(s)                                                                                     | postgres
    5033 | SET_MARK_GROUP     | END                     | myGroup2          | Mark23                                                                                                             | postgres
    5034 | SET_MARK_GROUPS    | BEGIN                   | myGroup1,myGroup2 | Multi-3                                                                                                            | postgres
    5035 | LOCK_GROUPS        | BEGIN                   | myGroup1,myGroup2 |                                                                                                                    | postgres
    5036 | LOCK_GROUPS        | END                     | myGroup1,myGroup2 | 11 tables locked, 0 deadlock(s)                                                                                    | postgres
    5037 | SET_MARK_GROUPS    | END                     | myGroup1,myGroup2 | Multi-3                                                                                                            | postgres
    5059 | SNAP_GROUP         | BEGIN                   | myGroup1          | /tmp/emaj_test/snaps                                                                                               | postgres
    5060 | SNAP_GROUP         | END                     | myGroup1          | 6 tables/sequences processed                                                                                       | postgres
    5061 | SNAP_GROUP         | BEGIN                   | myGroup1          | /tmp/emaj_test/snaps                                                                                               | postgres
    5062 | SNAP_GROUP         | END                     | myGroup1          | 6 tables/sequences processed                                                                                       | postgres
    5074 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/log_snaps                                          | postgres
    5075 | SNAP_LOG_GROUP     | END                     | myGroup2          | 8 tables/sequences processed                                                                                       | postgres
    5076 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From initial mark to current situation towards /tmp/emaj_test/log_snaps                                            | postgres
    5077 | SNAP_LOG_GROUP     | END                     | myGroup2          | 8 tables/sequences processed                                                                                       | postgres
    5078 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From mark Mark21 to current situation towards /tmp/emaj_test/log_snaps                                             | postgres
    5079 | SNAP_LOG_GROUP     | END                     | myGroup2          | 8 tables/sequences processed                                                                                       | postgres
    5080 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From mark Mark21 to mark Mark21 towards /tmp/emaj_test/log_snaps                                                   | postgres
    5081 | SNAP_LOG_GROUP     | END                     | myGroup2          | 8 tables/sequences processed                                                                                       | postgres
    5082 | SNAP_LOG_GROUP     | BEGIN                   | myGroup2          | From mark Mark21 to mark Mark23 towards /tmp/emaj_test/log_snaps                                                   | postgres
    5083 | SNAP_LOG_GROUP     | END                     | myGroup2          | 8 tables/sequences processed                                                                                       | postgres
    5084 | GEN_SQL_GROUP      | BEGIN                   |                   |                                                                                                                    | postgres
    5085 | GEN_SQL_GROUP      | END                     |                   | 0 generated statements                                                                                             | postgres
    5087 | GEN_SQL_GROUPS     | BEGIN                   |                   |                                                                                                                    | postgres
    5088 | GEN_SQL_GROUPS     | END                     |                   | 0 generated statements                                                                                             | postgres
    5108 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to current situation towards /tmp/emaj_test/sql_scripts/myFile                                   | postgres
    5109 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5110 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From mark Mark21 to current situation towards /tmp/emaj_test/sql_scripts/myFile                                    | postgres
    5111 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5112 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark Mark22 towards /tmp/emaj_test/sql_scripts/myFile                                         | postgres
    5113 | GEN_SQL_GROUP      | END                     | myGroup2          | 11602 generated statements                                                                                         | postgres
    5114 | GEN_SQL_GROUPS     | BEGIN                   | myGroup1,myGroup2 | From mark Multi-1 to current situation towards /tmp/emaj_test/sql_scripts/myFile                                   | postgres
    5115 | GEN_SQL_GROUPS     | END                     | myGroup1,myGroup2 | 11713 generated statements                                                                                         | postgres
    5116 | GEN_SQL_GROUPS     | BEGIN                   | myGroup1,myGroup2 | From mark Multi-2 to mark Multi-3 towards /tmp/emaj_test/sql_scripts/myFile                                        | postgres
    5117 | GEN_SQL_GROUPS     | END                     | myGroup1,myGroup2 | 113 generated statements                                                                                           | postgres
    5118 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile                                 | postgres
    5119 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5120 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5121 | GEN_SQL_GROUP      | END                     | myGroup2          | 11712 generated statements                                                                                         | postgres
    5122 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5123 | GEN_SQL_GROUP      | END                     | myGroup2          | 11711 generated statements                                                                                         | postgres
    5124 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5125 | GEN_SQL_GROUP      | END                     | myGroup2          | 11611 generated statements                                                                                         | postgres
    5126 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5127 | GEN_SQL_GROUP      | END                     | myGroup2          | 1 generated statements                                                                                             | postgres
    5128 | GEN_SQL_GROUP      | BEGIN                   | myGroup2          | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering | postgres
    5129 | GEN_SQL_GROUP      | END                     | myGroup2          | 100 generated statements                                                                                           | postgres
    5130 | GEN_SQL_GROUPS     | BEGIN                   | myGroup1,myGroup2 | From mark Multi-1 to mark Multi-3 towards /tmp/emaj_test/sql_scripts/myFile with tables/sequences filtering        | postgres
    5131 | GEN_SQL_GROUPS     | END                     | myGroup1,myGroup2 | 100 generated statements                                                                                           | postgres
    5199 | DISABLE_PROTECTION | EVENT TRIGGERS DISABLED |                   | <none>                                                                                                             | postgres
    5200 | ENABLE_PROTECTION  | EVENT TRIGGERS ENABLED  |                   | <none>                                                                                                             | postgres
    5201 | ENABLE_PROTECTION  | EVENT TRIGGERS ENABLED  |                   | <none>                                                                                                             | postgres
(79 rows)

truncate emaj.emaj_hist;
alter sequence emaj.emaj_hist_hist_id_seq restart 6000;
alter sequence emaj.emaj_time_stamp_time_id_seq restart 600;
alter sequence emaj.emaj_mark_mark_id_seq restart 600;
alter sequence emaj.emaj_global_seq restart 100000;
