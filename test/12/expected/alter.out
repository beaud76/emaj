-- alter.sql : test emaj_move_table(), emaj_move_tables(), emaj_move_sequence(), emaj_move_sequences()
--                  emaj_modify_table() and emaj_modify_tables() functions
--
-- set sequence restart value
alter sequence emaj.emaj_hist_hist_id_seq restart 6000;
alter sequence emaj.emaj_time_stamp_time_id_seq restart 6000;
alter sequence emaj.emaj_rlbk_rlbk_id_seq restart 6000;
alter sequence emaj.emaj_global_seq restart 60000;
-----------------------------
-- stop, reset and drop and recreate groups
-----------------------------
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                7
(1 row)

select emaj.emaj_drop_group('myGroup1');
 emaj_drop_group 
-----------------
               7
(1 row)

select emaj.emaj_force_drop_group('myGroup2');
 emaj_force_drop_group 
-----------------------
                     8
(1 row)

select emaj.emaj_stop_group('phil''s group#3",','Simple stop mark');
 emaj_stop_group 
-----------------
               4
(1 row)

select emaj.emaj_drop_group('phil''s group#3",');
 emaj_drop_group 
-----------------
               4
(1 row)

select emaj.emaj_force_stop_group('myGroup4');
 emaj_force_stop_group 
-----------------------
                     5
(1 row)

select emaj.emaj_drop_group('myGroup4');
 emaj_drop_group 
-----------------
               5
(1 row)

select emaj.emaj_force_stop_group('emptyGroup');
 emaj_force_stop_group 
-----------------------
                     0
(1 row)

select emaj.emaj_drop_group('emptyGroup');
 emaj_drop_group 
-----------------
               0
(1 row)

select emaj.emaj_create_group('myGroup1');
 emaj_create_group 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl1','myGroup1','{"priority":20}'::jsonb);
NOTICE:  table "mytbl1_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema1.mytbl1" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema1.mytbl1" does not exist, skipping
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl2','myGroup1','{"log_data_tablespace":"tsplog1","log_index_tablespace":"tsplog1"}'::jsonb);
NOTICE:  table "mytbl2_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema1.mytbl2" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema1.mytbl2" does not exist, skipping
WARNING:  _create_tbl: The table "myschema1.mytbl2" has triggers (mytbl2trg1, mytbl2trg2). They will be automatically disabled during E-Maj rollback operations, unless they have been recorded into the list of triggers that may be kept enabled, with the emaj_ignore_app_trigger() function.
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl2b','myGroup1','{"log_data_tablespace":"tsp log''2","log_index_tablespace":"tsp log''2"}'::jsonb);
NOTICE:  table "mytbl2b_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema1.mytbl2b" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema1.mytbl2b" does not exist, skipping
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','myTbl3','myGroup1','{"priority":10,"log_data_tablespace":"tsplog1"}'::jsonb);
NOTICE:  table "myTbl3_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema1.myTbl3" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema1.myTbl3" does not exist, skipping
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl4','myGroup1','{"priority":20,"log_data_tablespace":"tsplog1","log_index_tablespace":"tsp log''2"}'::jsonb);
NOTICE:  table "mytbl4_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema1.mytbl4" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema1.mytbl4" does not exist, skipping
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_sequences('myschema1','.*',null,'myGroup1');
 emaj_assign_sequences 
-----------------------
                     2
(1 row)

select emaj.emaj_create_group('myGroup2');
 emaj_create_group 
-------------------
                 1
(1 row)

select emaj.emaj_assign_tables('myschema2','.*','mytbl[7,8]','myGroup2');
NOTICE:  table "myTbl3_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema2.myTbl3" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema2.myTbl3" does not exist, skipping
NOTICE:  table "mytbl1_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema2.mytbl1" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema2.mytbl1" does not exist, skipping
NOTICE:  table "mytbl2_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema2.mytbl2" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema2.mytbl2" does not exist, skipping
NOTICE:  table "mytbl4_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema2.mytbl4" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema2.mytbl4" does not exist, skipping
NOTICE:  table "mytbl5_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema2.mytbl5" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema2.mytbl5" does not exist, skipping
NOTICE:  table "mytbl6_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema2.mytbl6" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema2.mytbl6" does not exist, skipping
 emaj_assign_tables 
--------------------
                  6
(1 row)

select emaj.emaj_assign_sequences('myschema2','.*','myseq2','myGroup2');
 emaj_assign_sequences 
-----------------------
                     2
(1 row)

select emaj.emaj_create_group('emptyGroup');
 emaj_create_group 
-------------------
                 1
(1 row)

select emaj.emaj_create_group('myGroup4');
 emaj_create_group 
-------------------
                 1
(1 row)

select emaj.emaj_assign_tables('myschema4','.*',null,'myGroup4');
WARNING:  _assign_tables: Some partitionned tables (mytblp) are not selected.
NOTICE:  table "mytblm_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema4.mytblm" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema4.mytblm" does not exist, skipping
WARNING:  _create_tbl: The table "myschema4.mytblm" has triggers (mytblm_insert_trigger). They will be automatically disabled during E-Maj rollback operations, unless they have been recorded into the list of triggers that may be kept enabled, with the emaj_ignore_app_trigger() function.
NOTICE:  table "mytblc2_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema4.mytblc2" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema4.mytblc2" does not exist, skipping
NOTICE:  table "mypartp2_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema4.mypartp2" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema4.mypartp2" does not exist, skipping
NOTICE:  table "mytblc1_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema4.mytblc1" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema4.mytblc1" does not exist, skipping
NOTICE:  table "mypartp1_log" does not exist, skipping
NOTICE:  trigger "emaj_log_trg" for relation "myschema4.mypartp1" does not exist, skipping
NOTICE:  trigger "emaj_trunc_trg" for relation "myschema4.mypartp1" does not exist, skipping
 emaj_assign_tables 
--------------------
                  5
(1 row)

-----------------------------------
-- emaj_move_table
-----------------------------------
-- error cases
-- table not in a group
select emaj.emaj_move_table('dummySchema','mytbl1','myGroup2');
ERROR:  _move_tables: some tables ("dummySchema".mytbl1) do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._move_tables(text,text[],text,text,boolean,boolean) line 47 at RAISE
PL/pgSQL function emaj.emaj_move_table(text,text,text,text) line 6 at RETURN
select emaj.emaj_move_table('myschema1','dummyTable','myGroup2');
ERROR:  _move_tables: some tables (myschema1."dummyTable") do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._move_tables(text,text[],text,text,boolean,boolean) line 47 at RAISE
PL/pgSQL function emaj.emaj_move_table(text,text,text,text) line 6 at RETURN
-- bad new group
select emaj.emaj_move_table('myschema1','mytbl1','dummyGroup');
ERROR:  _check_group_names: The group "dummyGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 36 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_newGroup], v_mayBeNull := FALSE, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._move_tables(text,text[],text,text,boolean,boolean) line 27 at PERFORM
PL/pgSQL function emaj.emaj_move_table(text,text,text,text) line 6 at RETURN
-- bad mark
select emaj.emaj_move_table('myschema1','mytbl1','myGroup2','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_loggingGroups, v_mark)"
PL/pgSQL function emaj._move_tables(text,text[],text,text,boolean,boolean) line 76 at SQL statement
PL/pgSQL function emaj.emaj_move_table(text,text,text,text) line 6 at RETURN
-- move to the same group
select emaj.emaj_move_table('myschema1','mytbl1','myGroup1');
WARNING:  _move_tables: some tables (myschema1.mytbl1) already belong to the tables group myGroup1.
 emaj_move_table 
-----------------
               0
(1 row)

-- ok
select emaj.emaj_move_table('myschema1','mytbl1','myGroup2');
 emaj_move_table 
-----------------
               1
(1 row)

-----------------------------------
-- emaj_move_tables with array
-----------------------------------
-- error cases
-- table not in a group
select emaj.emaj_move_tables('myschema1',array['dummyTable','mytbl1','mytbl2'],'myGroup1');
ERROR:  _move_tables: some tables (myschema1."dummyTable") do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._move_tables(text,text[],text,text,boolean,boolean) line 47 at RAISE
PL/pgSQL function emaj.emaj_move_tables(text,text[],text,text) line 6 at RETURN
-- empty tables array
select emaj.emaj_move_tables('myschema1',array[]::text[],'myGroup1');
WARNING:  _move_tables: No table to process.
 emaj_move_tables 
------------------
                0
(1 row)

select emaj.emaj_move_tables('myschema1',null,'myGroup1');
WARNING:  _move_tables: No table to process.
 emaj_move_tables 
------------------
                0
(1 row)

select emaj.emaj_move_tables('myschema1',array[''],'myGroup1');
WARNING:  _move_tables: No table to process.
 emaj_move_tables 
------------------
                0
(1 row)

-- ok (with a duplicate table name)
select emaj.emaj_move_tables('myschema1',array['mytbl2','mytbl2b','mytbl2'],'myGroup2');
 emaj_move_tables 
------------------
                2
(1 row)

select rel_schema, rel_tblseq, rel_group from emaj.emaj_relation
  where rel_schema = 'myschema1' and rel_kind = 'r' and upper_inf(rel_time_range)
  order by 1,2,3;
 rel_schema | rel_tblseq | rel_group 
------------+------------+-----------
 myschema1  | myTbl3     | myGroup1
 myschema1  | mytbl1     | myGroup2
 myschema1  | mytbl2     | myGroup2
 myschema1  | mytbl2b    | myGroup2
 myschema1  | mytbl4     | myGroup1
(5 rows)

-----------------------------------
-- emaj_move_tables with filters
-----------------------------------
-- empty tables array
select emaj.emaj_move_tables('myschema1',null,null,'myGroup1');
WARNING:  _move_tables: No table to process.
 emaj_move_tables 
------------------
                0
(1 row)

select emaj.emaj_move_tables('myschema1','','','myGroup1');
WARNING:  _move_tables: No table to process.
 emaj_move_tables 
------------------
                0
(1 row)

select emaj.emaj_move_tables('myschema1','mytbl1','mytbl1','myGroup1');
WARNING:  _move_tables: No table to process.
 emaj_move_tables 
------------------
                0
(1 row)

-- ok and go back to myGroup1
select emaj.emaj_move_tables('myschema1','my(t|T)bl.*','mytbl2$','myGroup1');
 emaj_move_tables 
------------------
                2
(1 row)

select emaj.emaj_move_tables('myschema1','.*','','myGroup1');
 emaj_move_tables 
------------------
                1
(1 row)

select altr_time_id, altr_step, altr_schema, altr_tblseq, altr_group, altr_priority, altr_group_is_logging,
       altr_new_group, altr_new_group_is_logging from emaj.emaj_alter_plan
  order by 1 desc, 2,3,4 limit 6;
 altr_time_id | altr_step | altr_schema | altr_tblseq | altr_group | altr_priority | altr_group_is_logging | altr_new_group | altr_new_group_is_logging 
--------------+-----------+-------------+-------------+------------+---------------+-----------------------+----------------+---------------------------
         6024 | MOVE_TBL  | myschema1   | mytbl2      | myGroup2   |               | f                     | myGroup1       | f
         6023 | MOVE_TBL  | myschema1   | mytbl1      | myGroup2   |               | f                     | myGroup1       | f
         6023 | MOVE_TBL  | myschema1   | mytbl2b     | myGroup2   |               | f                     | myGroup1       | f
         6022 | MOVE_TBL  | myschema1   | mytbl2      | myGroup1   |               | f                     | myGroup2       | f
         6022 | MOVE_TBL  | myschema1   | mytbl2b     | myGroup1   |               | f                     | myGroup2       | f
         6021 | MOVE_TBL  | myschema1   | mytbl1      | myGroup1   |               | f                     | myGroup2       | f
(6 rows)

select group_last_alter_time_id, group_nb_table, group_nb_sequence from emaj.emaj_group 
  where group_name in ('myGroup1','myGroup2') order by 1 desc ,2,3;
 group_last_alter_time_id | group_nb_table | group_nb_sequence 
--------------------------+----------------+-------------------
                     6024 |              5 |                 2
                     6024 |              6 |                 2
(2 rows)

-----------------------------------
-- emaj_move_sequence
-----------------------------------
-- error cases
-- sequence not in a group
select emaj.emaj_move_sequence('dummySchema','myseq1','myGroup1');
ERROR:  _move_sequences: some sequences ("dummySchema".myseq1) do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._move_sequences(text,text[],text,text,boolean,boolean) line 46 at RAISE
PL/pgSQL function emaj.emaj_move_sequence(text,text,text,text) line 6 at RETURN
select emaj.emaj_move_sequence('myschema2','dummySequence','myGroup1');
ERROR:  _move_sequences: some sequences (myschema2."dummySequence") do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._move_sequences(text,text[],text,text,boolean,boolean) line 46 at RAISE
PL/pgSQL function emaj.emaj_move_sequence(text,text,text,text) line 6 at RETURN
-- bad new group
select emaj.emaj_move_sequence('myschema2','myseq1','dummyGroup');
ERROR:  _check_group_names: The group "dummyGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 36 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_newGroup], v_mayBeNull := FALSE, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._move_sequences(text,text[],text,text,boolean,boolean) line 26 at PERFORM
PL/pgSQL function emaj.emaj_move_sequence(text,text,text,text) line 6 at RETURN
-- bad mark
select emaj.emaj_move_sequence('myschema2','myseq1','myGroup1','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_loggingGroups, v_mark)"
PL/pgSQL function emaj._move_sequences(text,text[],text,text,boolean,boolean) line 75 at SQL statement
PL/pgSQL function emaj.emaj_move_sequence(text,text,text,text) line 6 at RETURN
-- move to the same group
select emaj.emaj_move_sequence('myschema2','myseq1','myGroup2');
WARNING:  _move_sequences: some sequences (myschema2.myseq1) already belong to the tables group myGroup2.
 emaj_move_sequence 
--------------------
                  0
(1 row)

-- ok
select emaj.emaj_move_sequence('myschema2','myseq1','myGroup1');
 emaj_move_sequence 
--------------------
                  1
(1 row)

-----------------------------------
-- emaj_move_sequences with array
-----------------------------------
-- error cases
-- sequence not in a group
select emaj.emaj_move_sequences('myschema2',array['dummySequence','myseq1'],'myGroup1');
ERROR:  _move_sequences: some sequences (myschema2."dummySequence") do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._move_sequences(text,text[],text,text,boolean,boolean) line 46 at RAISE
PL/pgSQL function emaj.emaj_move_sequences(text,text[],text,text) line 6 at RETURN
-- empty tables array
select emaj.emaj_move_sequences('myschema2',array[]::text[],'myGroup1');
WARNING:  _move_sequences: No sequence to process.
 emaj_move_sequences 
---------------------
                   0
(1 row)

select emaj.emaj_move_sequences('myschema2',null,'myGroup1');
WARNING:  _move_sequences: No sequence to process.
 emaj_move_sequences 
---------------------
                   0
(1 row)

select emaj.emaj_move_sequences('myschema2',array[''],'myGroup1');
WARNING:  _move_sequences: No sequence to process.
 emaj_move_sequences 
---------------------
                   0
(1 row)

-- ok (with a duplicate sequence name)
select emaj.emaj_move_sequences('myschema2',array['myseq1','myseq1'],'myGroup4');
 emaj_move_sequences 
---------------------
                   1
(1 row)

select rel_schema, rel_tblseq, rel_group from emaj.emaj_relation
  where rel_schema = 'myschema2' and rel_kind = 'S' and upper_inf(rel_time_range)
  order by 1,2,3;
 rel_schema |    rel_tblseq    | rel_group 
------------+------------------+-----------
 myschema2  | myTbl3_col31_seq | myGroup2
 myschema2  | myseq1           | myGroup4
(2 rows)

-----------------------------------
-- emaj_move_sequences with filters
-----------------------------------
-- empty sequences array
select emaj.emaj_move_sequences('myschema21',null,null,'myGroup2');
WARNING:  _move_sequences: No sequence to process.
 emaj_move_sequences 
---------------------
                   0
(1 row)

select emaj.emaj_move_sequences('myschema21','','','myGroup2');
WARNING:  _move_sequences: No sequence to process.
 emaj_move_sequences 
---------------------
                   0
(1 row)

select emaj.emaj_move_sequences('myschema21','myseq1','myseq1','myGroup2');
WARNING:  _move_sequences: No sequence to process.
 emaj_move_sequences 
---------------------
                   0
(1 row)

-- ok and go back to myGroup2
select emaj.emaj_move_sequences('myschema2','.*','','myGroup2');
 emaj_move_sequences 
---------------------
                   1
(1 row)

select altr_time_id, altr_step, altr_schema, altr_tblseq, altr_group, altr_priority, altr_group_is_logging,
       altr_new_group, altr_new_group_is_logging from emaj.emaj_alter_plan
  order by 1 desc, 2,3,4 limit 3;
 altr_time_id | altr_step | altr_schema | altr_tblseq | altr_group | altr_priority | altr_group_is_logging | altr_new_group | altr_new_group_is_logging 
--------------+-----------+-------------+-------------+------------+---------------+-----------------------+----------------+---------------------------
         6028 | MOVE_SEQ  | myschema2   | myseq1      | myGroup4   |               | f                     | myGroup2       | f
         6027 | MOVE_SEQ  | myschema2   | myseq1      | myGroup1   |               | f                     | myGroup4       | f
         6026 | MOVE_SEQ  | myschema2   | myseq1      | myGroup2   |               | f                     | myGroup1       | f
(3 rows)

select group_last_alter_time_id, group_nb_table, group_nb_sequence from emaj.emaj_group 
  where group_name in ('myGroup1','myGroup2','myGroup4') order by 1 desc ,2,3;
 group_last_alter_time_id | group_nb_table | group_nb_sequence 
--------------------------+----------------+-------------------
                     6028 |              5 |                 0
                     6028 |              6 |                 2
                     6027 |              5 |                 2
(3 rows)

-----------------------------------
-- emaj_modify_table
-----------------------------------
-- error cases
-- table not in a group
select emaj.emaj_modify_table('dummySchema','mytbl1',null);
ERROR:  _modify_tables: some tables ("dummySchema".mytbl1) do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 50 at RAISE
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
select emaj.emaj_modify_table('myschema1','dummyTable',null);
ERROR:  _modify_tables: some tables (myschema1."dummyTable") do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 50 at RAISE
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
-- invalid priority
select emaj.emaj_modify_table('myschema1','mytbl1','{"priority":"not_numeric"}'::jsonb);
ERROR:  _modify_tables: the "priority" property is not numeric.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 59 at RAISE
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
-- invalid tablespace
select emaj.emaj_modify_table('myschema1','mytbl1','{"log_data_tablespace":"dummytsp"}'::jsonb);
ERROR:  _modify_tables: the log data tablespace "dummytsp" does not exists.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 67 at RAISE
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
select emaj.emaj_modify_table('myschema1','mytbl1','{"log_index_tablespace":"dummytsp"}'::jsonb);
ERROR:  _modify_tables: the log index tablespace "dummytsp" does not exists.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 74 at RAISE
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
-- unknown property
select emaj.emaj_modify_table('myschema1','mytbl1','{"unknown_property":null}'::jsonb);
ERROR:  _modify_tables: properties "{"unknown_property": null}" are unknown.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 81 at RAISE
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
-- bad mark
select emaj.emaj_modify_table('myschema1','mytbl1',null,'EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_loggingGroups, v_mark)"
PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 98 at SQL statement
PL/pgSQL function emaj.emaj_modify_table(text,text,jsonb,text) line 7 at RETURN
-- ok
-- change a priority
select emaj.emaj_modify_table('myschema1','mytbl2','{"priority":1}');
 emaj_modify_table 
-------------------
                 1
(1 row)

-- change a log data tablespace
select emaj.emaj_modify_table('myschema1','mytbl1','{"log_data_tablespace":"tsp log''2"}');
 emaj_modify_table 
-------------------
                 1
(1 row)

-- change a log index tablespace
select emaj.emaj_modify_table('myschema1','mytbl1','{"log_index_tablespace":"tsp log''2"}');
 emaj_modify_table 
-------------------
                 1
(1 row)

select rel_schema, rel_tblseq, rel_time_range, rel_priority from emaj.emaj_relation
  where rel_schema = 'myschema1' and rel_tblseq = 'mytbl2' order by 3 desc ,1,2 limit 2;
 rel_schema | rel_tblseq | rel_time_range | rel_priority 
------------+------------+----------------+--------------
 myschema1  | mytbl2     | [6024,)        |            1
 myschema1  | mytbl2     | [6022,6024)    |             
(2 rows)

select rel_schema, rel_tblseq, rel_time_range, rel_log_dat_tsp, rel_log_idx_tsp from emaj.emaj_relation
  where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1' order by 3 desc ,1,2 limit 2;
 rel_schema | rel_tblseq | rel_time_range | rel_log_dat_tsp | rel_log_idx_tsp 
------------+------------+----------------+-----------------+-----------------
 myschema1  | mytbl1     | [6023,)        | tsp log'2       | tsp log'2
 myschema1  | mytbl1     | [6021,6023)    |                 | 
(2 rows)

-- revert changes
select emaj.emaj_modify_table('myschema1','mytbl2','{"priority":null}');
 emaj_modify_table 
-------------------
                 1
(1 row)

select emaj.emaj_modify_table('myschema1','mytbl1','{"log_data_tablespace":null, "log_index_tablespace":null}');
 emaj_modify_table 
-------------------
                 1
(1 row)

select rel_schema, rel_tblseq, rel_time_range, rel_priority from emaj.emaj_relation
  where rel_schema = 'myschema1' and rel_tblseq = 'mytbl2' order by 3 desc ,1,2 limit 2;
 rel_schema | rel_tblseq | rel_time_range | rel_priority 
------------+------------+----------------+--------------
 myschema1  | mytbl2     | [6024,)        |             
 myschema1  | mytbl2     | [6022,6024)    |             
(2 rows)

select rel_schema, rel_tblseq, rel_time_range, rel_log_dat_tsp, rel_log_idx_tsp from emaj.emaj_relation
  where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1' order by 3 desc ,1,2 limit 2;
 rel_schema | rel_tblseq | rel_time_range | rel_log_dat_tsp | rel_log_idx_tsp 
------------+------------+----------------+-----------------+-----------------
 myschema1  | mytbl1     | [6023,)        |                 | 
 myschema1  | mytbl1     | [6021,6023)    |                 | 
(2 rows)

-------------------------------------
---- emaj_modify_tables with array
-------------------------------------
-- error cases
-- table not in a group
select emaj.emaj_modify_tables('myschema2',array['dummyTable','mytbl1','mytbl2'],null);
ERROR:  _modify_tables: some tables (myschema2."dummyTable") do not currently belong to any tables group.
CONTEXT:  PL/pgSQL function emaj._modify_tables(text,text[],jsonb,text,boolean,boolean) line 50 at RAISE
PL/pgSQL function emaj.emaj_modify_tables(text,text[],jsonb,text) line 7 at RETURN
-- empty tables array
select emaj.emaj_modify_tables('myschema2',array[]::text[],null);
WARNING:  _modified_tables: No table to process.
 emaj_modify_tables 
--------------------
                  0
(1 row)

select emaj.emaj_modify_tables('myschema2',null,null);
WARNING:  _modified_tables: No table to process.
 emaj_modify_tables 
--------------------
                  0
(1 row)

select emaj.emaj_modify_tables('myschema2',array[''],null);
WARNING:  _modified_tables: No table to process.
 emaj_modify_tables 
--------------------
                  0
(1 row)

---- ok (with a duplicate table name)
select emaj.emaj_modify_tables('myschema2',array['mytbl1','mytbl2','mytbl2'],'{"priority":10,"log_data_tablespace":"tsplog1"}');
 emaj_modify_tables 
--------------------
                  2
(1 row)

select rel_schema, rel_tblseq, rel_time_range, rel_priority, rel_log_dat_tsp from emaj.emaj_relation
  where rel_schema = 'myschema2' and rel_tblseq in ('mytbl1','mytbl2') order by 1,2,3;
 rel_schema | rel_tblseq | rel_time_range | rel_priority | rel_log_dat_tsp 
------------+------------+----------------+--------------+-----------------
 myschema2  | mytbl1     | [6015,)        |           10 | tsplog1
 myschema2  | mytbl2     | [6015,)        |           10 | tsplog1
(2 rows)

-----------------------------------
-- emaj_modify_tables with filters
-----------------------------------
-- empty tables array
select emaj.emaj_modify_tables('myschema2',null,null,null::jsonb);
WARNING:  _modified_tables: No table to process.
 emaj_modify_tables 
--------------------
                  0
(1 row)

select emaj.emaj_modify_tables('myschema2','','',null::jsonb);
WARNING:  _modified_tables: No table to process.
 emaj_modify_tables 
--------------------
                  0
(1 row)

select emaj.emaj_modify_tables('myschema2','mytbl1','mytbl1',null::jsonb);
WARNING:  _modified_tables: No table to process.
 emaj_modify_tables 
--------------------
                  0
(1 row)

-- ok and revert the previous changes
select emaj.emaj_modify_tables('myschema2','mytbl.*','','{"priority":null,"log_data_tablespace":null}'::jsonb);
 emaj_modify_tables 
--------------------
                  2
(1 row)

select rel_schema, rel_tblseq, rel_time_range, rel_priority, rel_log_dat_tsp, rel_log_idx_tsp from emaj.emaj_relation
  where rel_schema = 'myschema2' and rel_tblseq like 'mytbl%' order by 1,2,3;
 rel_schema | rel_tblseq | rel_time_range | rel_priority | rel_log_dat_tsp | rel_log_idx_tsp 
------------+------------+----------------+--------------+-----------------+-----------------
 myschema2  | mytbl1     | [6015,)        |              |                 | 
 myschema2  | mytbl2     | [6015,)        |              |                 | 
 myschema2  | mytbl4     | [6015,)        |              |                 | 
 myschema2  | mytbl5     | [6015,)        |              |                 | 
 myschema2  | mytbl6     | [6015,)        |              |                 | 
(5 rows)

select altr_time_id, altr_step, altr_schema, altr_tblseq, altr_group, altr_priority, altr_group_is_logging,
       altr_new_group, altr_new_group_is_logging from emaj.emaj_alter_plan
  order by 1 desc, 2,3,4 limit 14;
 altr_time_id |        altr_step         | altr_schema | altr_tblseq | altr_group | altr_priority | altr_group_is_logging | altr_new_group | altr_new_group_is_logging 
--------------+--------------------------+-------------+-------------+------------+---------------+-----------------------+----------------+---------------------------
         6035 | CHANGE_TBL_LOG_DATA_TSP  | myschema2   | mytbl1      | myGroup2   |               | f                     |                | 
         6035 | CHANGE_TBL_LOG_DATA_TSP  | myschema2   | mytbl2      | myGroup2   |               | f                     |                | 
         6035 | CHANGE_REL_PRIORITY      | myschema2   | mytbl1      | myGroup2   |               | f                     |                | 
         6035 | CHANGE_REL_PRIORITY      | myschema2   | mytbl2      | myGroup2   |               | f                     |                | 
         6034 | CHANGE_TBL_LOG_DATA_TSP  | myschema2   | mytbl1      | myGroup2   |               | f                     |                | 
         6034 | CHANGE_TBL_LOG_DATA_TSP  | myschema2   | mytbl2      | myGroup2   |               | f                     |                | 
         6034 | CHANGE_REL_PRIORITY      | myschema2   | mytbl1      | myGroup2   |            10 | f                     |                | 
         6034 | CHANGE_REL_PRIORITY      | myschema2   | mytbl2      | myGroup2   |            10 | f                     |                | 
         6033 | CHANGE_TBL_LOG_DATA_TSP  | myschema1   | mytbl1      | myGroup1   |               | f                     |                | 
         6033 | CHANGE_TBL_LOG_INDEX_TSP | myschema1   | mytbl1      | myGroup1   |               | f                     |                | 
         6032 | CHANGE_REL_PRIORITY      | myschema1   | mytbl2      | myGroup1   |               | f                     |                | 
         6031 | CHANGE_TBL_LOG_INDEX_TSP | myschema1   | mytbl1      | myGroup1   |               | f                     |                | 
         6030 | CHANGE_TBL_LOG_DATA_TSP  | myschema1   | mytbl1      | myGroup1   |               | f                     |                | 
         6029 | CHANGE_REL_PRIORITY      | myschema1   | mytbl2      | myGroup1   |             1 | f                     |                | 
(14 rows)

-- checks are performed by the alterLogging.sql script
