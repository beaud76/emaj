-- start_stop.sql : test emaj_start_group(), emaj_start_groups(), 
--                      emaj_stop_group(), emaj_stop_groups(), emaj_force_stop_group(),
--                      emaj_protect_group() and emaj_unprotect_group() functions
--
SET client_min_messages TO WARNING;
-- set sequence restart value
alter sequence emaj.emaj_hist_hist_id_seq restart 1000;
alter sequence emaj.emaj_time_stamp_time_id_seq restart 1000;
-- prepare groups
select emaj.emaj_create_group('myGroup1');
 emaj_create_group 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl1','myGroup1','{"priority":20}'::jsonb);
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl2','myGroup1','{"log_data_tablespace":"tsplog1","log_index_tablespace":"tsplog1"}'::jsonb);
WARNING:  _create_tbl: The table "myschema1.mytbl2" has triggers (mytbl2trg1, mytbl2trg2). They will be automatically disabled during E-Maj rollback operations, unless they have been recorded into the list of triggers that may be kept enabled, with the emaj_ignore_app_trigger() function.
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl2b','myGroup1','{"log_data_tablespace":"tsp log''2","log_index_tablespace":"tsp log''2"}'::jsonb);
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','myTbl3','myGroup1','{"priority":10,"log_data_tablespace":"tsplog1"}'::jsonb);
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_table('myschema1','mytbl4','myGroup1','{"priority":20,"log_data_tablespace":"tsplog1","log_index_tablespace":"tsp log''2"}'::jsonb);
 emaj_assign_table 
-------------------
                 1
(1 row)

select emaj.emaj_assign_sequences('myschema1','.*',null,'myGroup1');
 emaj_assign_sequences 
-----------------------
                     2
(1 row)

select emaj.emaj_create_group('myGroup2');
 emaj_create_group 
-------------------
                 1
(1 row)

select emaj.emaj_assign_tables('myschema2','.*','mytbl[7,8]','myGroup2');
 emaj_assign_tables 
--------------------
                  6
(1 row)

select emaj.emaj_assign_sequences('myschema2','.*','myseq2','myGroup2');
 emaj_assign_sequences 
-----------------------
                     2
(1 row)

select emaj.emaj_create_group('emptyGroup');
 emaj_create_group 
-------------------
                 1
(1 row)

-- disable event triggers 
-- this is done to allow tests with missing or renamed or altered components
select emaj.emaj_disable_protection_by_event_triggers();
 emaj_disable_protection_by_event_triggers 
-------------------------------------------
                                         3
(1 row)

-----------------------------
-- emaj_start_group() tests
-----------------------------
-- group is unknown in emaj_group
select emaj.emaj_start_group(NULL,NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 30 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
select emaj.emaj_start_group('unknownGroup',NULL,NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
select emaj.emaj_start_groups(array['unknownGroup1','unknownGroup2'],NULL,NULL);
ERROR:  _check_group_names: The groups "unknownGroup1, unknownGroup2" do not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 44 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
-- reserved mark name
select emaj.emaj_start_group('myGroup1','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_groupNames, v_mark)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 44 at SQL statement
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
-- detection of a missing application schema
begin;
  drop schema myschema1 cascade;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (1): In group "myGroup1", the table "myschema1"."myTbl3" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 44 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing application relation
begin;
  drop table myschema1.mytbl4;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (1): In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 44 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of relation type change (a table is now a sequence!)
begin;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1' and upper_inf(rel_time_range);
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (1): In group "myGroup1", the sequence "myschema1"."mytbl1" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 44 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing E-Maj log schema
begin;
  drop schema emaj_myschema1 cascade;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (2): In group "myGroup1", the log table "emaj_myschema1"."myTbl3_log" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 64 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing log trigger
begin;
  drop trigger emaj_log_trg on myschema1.mytbl1;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (4): In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 109 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing log function
begin;
  drop function emaj_myschema1.mytbl1_log_fnct() cascade;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (3): In group "myGroup1", the log function "emaj_myschema1"."mytbl1_log_fnct" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 85 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing truncate trigger
begin;
  drop trigger emaj_trunc_trg on myschema1.mytbl1;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (5): In group "myGroup1", the truncate trigger "emaj_trunc_trg" on table "myschema1"."mytbl1" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 132 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing log table
begin;
  drop table emaj_myschema1.mytbl1_log;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (2): In group "myGroup1", the log table "emaj_myschema1"."mytbl1_log" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 64 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a change in the application table structure (new column)
begin;
  alter table myschema1.mytbl1 add column newcol int;
  alter table myschema1.mytbl1 add column othernewcol text;
  alter table myschema1.mytbl2 add column newcol int;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (6): In group "myGroup1", the structure of the application table "myschema1"."mytbl1" is not coherent with its log table ("emaj_myschema1"."mytbl1_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 186 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a change in the application table structure (column type change)
begin;
  alter table myschema1.mytbl4 drop column col42;
  alter table myschema1.mytbl4 alter column col45 type varchar(15);
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (6): In group "myGroup1", the structure of the application table "myschema1"."mytbl4" is not coherent with its log table ("emaj_myschema1"."mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 186 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a missing primary key
begin;
  alter table myschema1.mytbl4 drop constraint mytbl4_pkey;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (7): In rollbackable group "myGroup1", the table "myschema1"."mytbl4" has no primary key any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 211 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a table altered as UNLOGGED
begin;
  alter table myschema1."myTbl3" set unlogged;                        -- needs 9.5+
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (8): In rollbackable group "myGroup1", the table "myschema1"."myTbl3" is UNLOGGED or TEMP. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 230 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a table altered as WITH OIDS (PG12+ generates an error)
begin;
  alter table myschema1."myTbl3" set with oids;
ERROR:  syntax error at or near "with"
LINE 1: alter table myschema1."myTbl3" set with oids;
                                           ^
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- detection of a primary key structure change
begin;
  alter table myschema1.mytbl4 drop constraint mytbl4_pkey;
  alter table myschema1.mytbl4 add primary key (col41, col42);
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (10): In rollbackable group "myGroup1", the primary key of the table "myschema1"."mytbl4" has changed (col41 => col41,col42). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 282 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- detection of a log table missing a technical column
begin;
  alter table emaj_myschema1.mytbl1_log drop column emaj_verb;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (11): In group "myGroup1", the log table "emaj_myschema1"."mytbl1_log" miss some technical columns (emaj_verb). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 321 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
rollback;
-- should be OK
-- use the first correct emaj_start_group() function call to test the emaj_hist purge
INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('history_retention','0.1 second'::interval);
select pg_sleep(0.2);
 pg_sleep 
----------
 
(1 row)

select emaj.emaj_start_group('myGroup1','Mark1');
 emaj_start_group 
------------------
                7
(1 row)

-- check old events are deleted
select hist_function, hist_event, hist_object,
       regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g'),
       hist_user
  from emaj.emaj_hist order by hist_id;
  hist_function  | hist_event | hist_object |                                         regexp_replace                                         | hist_user 
-----------------+------------+-------------+------------------------------------------------------------------------------------------------+-----------
 START_GROUP     | BEGIN      | myGroup1    | With log reset                                                                                 | postgres
 PURGE_HISTORIES |            |             | 325 emaj_hist rows deleted ; 39 relation history rows deleted ; 46 alter groups events deleted | postgres
 LOCK_GROUP      | BEGIN      | myGroup1    |                                                                                                | postgres
 LOCK_GROUP      | END        | myGroup1    | 5 tables locked, 0 deadlock(s)                                                                 | postgres
 SET_MARK_GROUP  | BEGIN      | myGroup1    | Mark1                                                                                          | postgres
 SET_MARK_GROUP  | END        | myGroup1    | Mark1                                                                                          | postgres
 START_GROUP     | END        | myGroup1    | 7 tables/sequences processed                                                                   | postgres
(7 rows)

-- test the smallest history_retention value that means infinity
update emaj.emaj_param set param_value_interval = '100 years'::interval where param_key = 'history_retention';
select emaj.emaj_start_group('myGroup2','Mark2',true);
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

delete from emaj.emaj_param where param_key = 'history_retention';
select emaj.emaj_start_group('phil''s group#3",','Mark3',false);
 emaj_start_group 
------------------
                4
(1 row)

select emaj.emaj_start_group('emptyGroup','Mark1');
 emaj_start_group 
------------------
                0
(1 row)

select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

select emaj.emaj_stop_group('myGroup2');
 emaj_stop_group 
-----------------
               8
(1 row)

-- should be OK, with a warning on fkey between tables from different groups
begin;
  alter table myschema2.myTbl4 drop constraint mytbl4_col44_fkey;
  alter table myschema2.myTbl4 add constraint mytbl4_col44_fkey 
    FOREIGN KEY (col44,col45) REFERENCES myschema1.myTbl1 (col11,col12) ON DELETE CASCADE ON UPDATE SET NULL;
  select emaj.emaj_start_group('myGroup2','Mark2');
WARNING:  _check_fk_groups: The foreign key "mytbl4_col44_fkey" on the table "myschema2.mytbl4" references the table "myschema1.mytbl1" that is outside the groups (myGroup2).
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

rollback;
-- start with generated mark name
select emaj.emaj_start_group('myGroup1','%abc%',true);
 emaj_start_group 
------------------
                7
(1 row)

select emaj.emaj_start_group('myGroup2','',false);
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

-- group already started
select emaj.emaj_start_group('myGroup2','Mark3');
ERROR:  _check_group_names: The group "myGroup2" is not in IDLE state.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 74 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
SET client_min_messages TO NOTICE;
-- use of % in start mark name
select emaj.emaj_start_group('myGroup1','Foo%Bar');
ERROR:  _check_group_names: The group "myGroup1" is not in IDLE state.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 74 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 12 at RETURN
select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 myGroup2         | Mark2          |         1012 | t               | f                      |              |                         0 | 
 phil's group#3", | Mark3          |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1          |         1014 | f               | f                      |              |                         0 | 
 myGroup2         | STOP_%         |         1016 | t               | f                      |              |                         0 | 
 myGroup1         | %abc%          |         1018 | f               | f                      |              |                         0 | 
 myGroup2         | START_%        |         1019 | f               | f                      |              |                           | 
(6 rows)

-- multiple emaj_start_group() using the same generated start mark name => fails
-- this test is commented because the generated error message differs from one run to another
--begin;
--  select emaj.emaj_start_group('myGroup4');
--  select emaj.emaj_stop_group('myGroup4');
--  select emaj.emaj_start_group('myGroup4',NULL,false);
--rollback;
SET client_min_messages TO WARNING;
-- impact of started group
select group_name, group_is_logging, group_is_rlbk_protected from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected 
------------------+------------------+-------------------------
 emptyGroup       | t                | f
 myGroup1         | t                | f
 myGroup2         | t                | f
 myGroup4         | f                | f
 phil's group#3", | t                | t
(5 rows)

select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 myGroup2         | Mark2          |         1012 | t               | f                      |              |                         0 | 
 phil's group#3", | Mark3          |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1          |         1014 | f               | f                      |              |                         0 | 
 myGroup2         | STOP_%         |         1016 | t               | f                      |              |                         0 | 
 myGroup1         | %abc%          |         1018 | f               | f                      |              |                         0 | 
 myGroup2         | START_%        |         1019 | f               | f                      |              |                           | 
(6 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 1000 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
    1000 |                  0 | C
    1001 |                  0 | A
    1002 |                  0 | A
    1003 |                  0 | A
    1004 |                  0 | A
    1005 |                  0 | A
    1006 |                  0 | A
    1007 |                  0 | C
    1008 |                  0 | A
    1009 |                  0 | A
    1010 |                  0 | C
    1011 |                  0 | M
    1012 |                  0 | M
    1013 |                  0 | M
    1014 |                  0 | M
    1015 |                  0 | M
    1016 |                  0 | M
    1018 |                  0 | M
    1019 |                  0 | M
(19 rows)

-----------------------------
-- emaj_stop_group() tests
-----------------------------
-- unknown group
select emaj.emaj_stop_group(NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 30 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
select emaj.emaj_stop_group('unknownGroup');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
select emaj.emaj_stop_group(NULL,NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 30 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
select emaj.emaj_stop_group('unknownGroup',NULL);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
-- invalid mark
select emaj.emaj_stop_group('myGroup1','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_groupNames, v_mark)"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 47 at SQL statement
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
-- already existing mark
select emaj.emaj_stop_group('phil''s group#3",','Mark3');
ERROR:  _check_new_mark: The group "phil's group#3"," already contains a mark named "Mark3".
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 29 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_groupNames, v_mark)"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 47 at SQL statement
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: The table "myschema2.myTbl3" does not exist any more.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 93 at RAISE
PL/pgSQL function emaj.emaj_stop_group(text,text) line 10 at RETURN
rollback;
-- should be OK
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

select emaj.emaj_stop_group('emptyGroup');
 emaj_stop_group 
-----------------
               0
(1 row)

-- impact of stopped group
select group_name, group_is_logging, group_is_rlbk_protected from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected 
------------------+------------------+-------------------------
 emptyGroup       | f                | f
 myGroup1         | f                | f
 myGroup2         | t                | f
 myGroup4         | f                | f
 phil's group#3", | t                | t
(5 rows)

select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 myGroup2         | Mark2          |         1012 | t               | f                      |              |                         0 | 
 phil's group#3", | Mark3          |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1          |         1014 | t               | f                      |              |                         0 | 
 myGroup2         | STOP_%         |         1016 | t               | f                      |              |                         0 | 
 myGroup1         | %abc%          |         1018 | t               | f                      |              |                         0 | 
 myGroup2         | START_%        |         1019 | f               | f                      |              |                         0 | 
 myGroup1         | STOP_%         |         1020 | t               | f                      |              |                         0 | 
 emptyGroup       | STOP_%         |         1021 | t               | f                      |              |                         0 | 
(8 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 1000 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
    1000 |                  0 | C
    1001 |                  0 | A
    1002 |                  0 | A
    1003 |                  0 | A
    1004 |                  0 | A
    1005 |                  0 | A
    1006 |                  0 | A
    1007 |                  0 | C
    1008 |                  0 | A
    1009 |                  0 | A
    1010 |                  0 | C
    1011 |                  0 | M
    1012 |                  0 | M
    1013 |                  0 | M
    1014 |                  0 | M
    1015 |                  0 | M
    1016 |                  0 | M
    1018 |                  0 | M
    1019 |                  0 | M
    1020 |                  0 | M
    1021 |                  0 | M
(21 rows)

-- should be OK
select emaj.emaj_stop_group('myGroup2','Stop mark');
 emaj_stop_group 
-----------------
               8
(1 row)

-- warning, already stopped
select emaj.emaj_stop_group('myGroup2');
WARNING:  _stop_groups: The group "myGroup2" is already in IDLE state.
 emaj_stop_group 
-----------------
               0
(1 row)

select emaj.emaj_stop_group('myGroup2','Stop mark 2');
WARNING:  _stop_groups: The group "myGroup2" is already in IDLE state.
 emaj_stop_group 
-----------------
               0
(1 row)

-- start with auto-mark in a single transaction
begin transaction;
  select emaj.emaj_start_group('myGroup1');
 emaj_start_group 
------------------
                7
(1 row)

  select emaj.emaj_start_group('myGroup2','');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

commit;
select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 phil's group#3", | Mark3          |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1          |         1014 | t               | f                      |              |                         0 | 
 emptyGroup       | STOP_%         |         1021 | t               | f                      |              |                         0 | 
 myGroup1         | START_%        |         1023 | f               | f                      |              |                         0 | 
 myGroup2         | START_%        |         1024 | f               | f                      |              |                           | 
(5 rows)

begin transaction;
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

  select emaj.emaj_stop_group('myGroup2','');
 emaj_stop_group 
-----------------
               8
(1 row)

commit;
-- multiple emaj_stop_group() using the same generated start mark name => fails
-- this test is commented because the generated error message differs from one run to another
--begin;
--  select emaj.emaj_start_group('myGroup4','a_first_start_mark');
--  select emaj.emaj_stop_group('myGroup4','%');
--  select emaj.emaj_start_group('myGroup4','another_start_mark',false);
--  select emaj.emaj_stop_group('myGroup4','%');
--rollback;
-----------------------------
-- emaj_start_groups() tests
-----------------------------
select emaj.emaj_stop_group('myGroup1',NULL);
WARNING:  _stop_groups: The group "myGroup1" is already in IDLE state.
 emaj_stop_group 
-----------------
               0
(1 row)

-- NULL group names array
select emaj.emaj_start_groups(NULL,NULL,NULL);
WARNING:  _check_group_names: No group to process.
 emaj_start_groups 
-------------------
                 0
(1 row)

-- at least one group is unknown
select emaj.emaj_start_groups('{""}',NULL);
WARNING:  _check_group_names: No group to process.
 emaj_start_groups 
-------------------
                 0
(1 row)

select emaj.emaj_start_groups('{"unknownGroup",""}',NULL,true);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
select emaj.emaj_start_groups('{"myGroup1","unknownGroup"}',NULL,false);
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
-- reserved mark name
select emaj.emaj_start_groups('{"myGroup1"}','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text[],text) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_groupNames, v_mark)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 44 at SQL statement
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
-- 2 groups already started
select emaj.emaj_start_groups('{"myGroup1","myGroup2"}','Mark1',true);
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                15
(1 row)

select emaj.emaj_start_groups('{"myGroup1","myGroup2"}','Mark1',false);
ERROR:  _check_group_names: The groups "myGroup1, myGroup2" are not in IDLE state.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 77 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := 'IDLE')"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 20 at SQL statement
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
select emaj.emaj_stop_groups('{"myGroup1","myGroup2"}');
 emaj_stop_groups 
------------------
               15
(1 row)

-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Mark1',true);
ERROR:  _verify_groups (1): In group "myGroup2", the table "myschema2"."myTbl3" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 44 at RAISE
SQL statement "SELECT 0
        FROM emaj._verify_groups(v_groupNames, TRUE)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 25 at PERFORM
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 11 at RETURN
rollback;
-- should be OK, with a warning on fkey between tables from different groups and warning on group names array content
begin;
  alter table myschema2.myTbl4 drop constraint mytbl4_col44_fkey;
  alter table myschema2.myTbl4 add constraint mytbl4_col44_fkey 
    FOREIGN KEY (col44,col45) REFERENCES myschema1.myTbl1 (col11,col12) ON DELETE CASCADE ON UPDATE SET NULL;
  select emaj.emaj_start_groups(array['myGroup1',NULL,'myGroup2','','myGroup2','myGroup2','myGroup1'],'Mark1');
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                15
(1 row)

rollback;
-- impact of started groups
select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Mark1',true);
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                15
(1 row)

select group_name, group_is_logging, group_is_rlbk_protected from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected 
------------------+------------------+-------------------------
 emptyGroup       | f                | f
 myGroup1         | t                | f
 myGroup2         | t                | f
 myGroup4         | f                | f
 phil's group#3", | t                | t
(5 rows)

select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 phil's group#3", | Mark3          |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1          |         1014 | t               | f                      |              |                         0 | 
 emptyGroup       | STOP_%         |         1021 | t               | f                      |              |                         0 | 
 myGroup1         | Mark1          |         1030 | f               | f                      |              |                           | 
 myGroup2         | Mark1          |         1030 | f               | f                      |              |                           | 
(5 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 1000 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
    1000 |                  0 | C
    1001 |                  0 | A
    1002 |                  0 | A
    1003 |                  0 | A
    1004 |                  0 | A
    1005 |                  0 | A
    1006 |                  0 | A
    1007 |                  0 | C
    1008 |                  0 | A
    1009 |                  0 | A
    1010 |                  0 | C
    1011 |                  0 | M
    1012 |                  0 | M
    1013 |                  0 | M
    1014 |                  0 | M
    1015 |                  0 | M
    1016 |                  0 | M
    1018 |                  0 | M
    1019 |                  0 | M
    1020 |                  0 | M
    1021 |                  0 | M
    1022 |                  0 | M
    1023 |                  0 | M
    1024 |                  0 | M
    1025 |                  0 | M
    1026 |                  0 | M
    1027 |                  0 | M
    1028 |                  0 | M
    1030 |                  0 | M
(29 rows)

-----------------------------
-- emaj_stop_groups() tests
-----------------------------
-- NULL group names array
select emaj.emaj_stop_groups(NULL);
WARNING:  _check_group_names: No group to process.
 emaj_stop_groups 
------------------
                0
(1 row)

-- at least one group is unknown
select emaj.emaj_stop_groups('{""}');
WARNING:  _check_group_names: No group to process.
 emaj_stop_groups 
------------------
                0
(1 row)

select emaj.emaj_stop_groups('{"unknownGroup",""}');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_stop_groups(text[],text) line 7 at RETURN
select emaj.emaj_stop_groups('{"myGroup1","unknownGroup"}');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_stop_groups(text[],text) line 7 at RETURN
-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_stop_groups(array['myGroup1','myGroup2']);
ERROR:  _stop_groups: The table "myschema2.myTbl3" does not exist any more.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 93 at RAISE
PL/pgSQL function emaj.emaj_stop_groups(text[],text) line 7 at RETURN
rollback;
-- should be OK
select emaj.emaj_stop_groups(array['myGroup1','myGroup2'],'Global Stop at %');
 emaj_stop_groups 
------------------
               15
(1 row)

select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    |  regexp_replace  | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+------------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 phil's group#3", | Mark3            |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1            |         1014 | t               | f                      |              |                         0 | 
 emptyGroup       | STOP_%           |         1021 | t               | f                      |              |                         0 | 
 myGroup1         | Mark1            |         1030 | t               | f                      |              |                         0 | 
 myGroup2         | Mark1            |         1030 | t               | f                      |              |                         0 | 
 myGroup1         | Global Stop at % |         1031 | t               | f                      |              |                         0 | 
 myGroup2         | Global Stop at % |         1031 | t               | f                      |              |                         0 | 
(7 rows)

-- with warning about group names array content
select emaj.emaj_stop_groups(array['myGroup1',NULL,'myGroup2','','myGroup2','myGroup2','myGroup1']);
WARNING:  _stop_groups: The groups "myGroup1, myGroup2" are already in IDLE state.
 emaj_stop_groups 
------------------
                0
(1 row)

-----------------------------
-- emaj_force_stop_group() tests
-----------------------------
select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Mark1',true);
WARNING:  _check_fk_groups: The foreign key "mytbl6_col61_fkey" on the table "myschema2.mytbl6" references the table "myschema2.mytbl7" that is outside the groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: The table "myschema2.mytbl6" is referenced by the foreign key "mytbl8_col81_fkey" on the table "myschema2.mytbl8" that is outside the groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                15
(1 row)

-- unknown group
select emaj.emaj_force_stop_group(NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 30 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
select emaj.emaj_force_stop_group('unknownGroup');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := v_groupNames, v_mayBeNull := v_multiGroup, v_lockGroups := TRUE, v_checkList := '')"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 23 at SQL statement
PL/pgSQL function emaj.emaj_force_stop_group(text) line 9 at RETURN
-- should be OK
-- missing application schema
begin;
  drop schema mySchema2 cascade;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The schema "myschema2" does not exist any more.
WARNING:  _stop_groups: The table "myschema2.myTbl3" does not exist any more.
WARNING:  _stop_groups: The table "myschema2.mytbl1" does not exist any more.
WARNING:  _stop_groups: The table "myschema2.mytbl2" does not exist any more.
WARNING:  _stop_groups: The table "myschema2.mytbl4" does not exist any more.
WARNING:  _stop_groups: The table "myschema2.mytbl5" does not exist any more.
WARNING:  _stop_groups: The table "myschema2.mytbl6" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The table "myschema2.myTbl3" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- missing log trigger
begin;
  drop trigger emaj_log_trg on myschema2.mytbl4;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The log trigger "emaj_log_trg" on table "myschema2.mytbl4" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- missing truncate trigger
begin;
  drop trigger emaj_trunc_trg on myschema2.mytbl4;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The truncate trigger "emaj_trunc_trg" on table "myschema2.mytbl4" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- sane group
select emaj.emaj_force_stop_group('myGroup2');
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

select emaj.emaj_force_stop_group('myGroup1');
 emaj_force_stop_group 
-----------------------
                     7
(1 row)

-- warning, already stopped
select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: The group "myGroup2" is already in IDLE state.
 emaj_force_stop_group 
-----------------------
                     0
(1 row)

-- impact of stopped groups
select group_name, group_is_logging, group_is_rlbk_protected from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected 
------------------+------------------+-------------------------
 emptyGroup       | f                | f
 myGroup1         | f                | f
 myGroup2         | f                | f
 myGroup4         | f                | f
 phil's group#3", | t                | t
(5 rows)

select mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_time_id, mark_group;
    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
 phil's group#3", | Mark3          |         1013 | f               | f                      |              |                         0 | 
 emptyGroup       | Mark1          |         1014 | t               | f                      |              |                         0 | 
 emptyGroup       | STOP_%         |         1021 | t               | f                      |              |                         0 | 
 myGroup1         | Mark1          |         1032 | t               | f                      |              |                           | 
 myGroup2         | Mark1          |         1032 | t               | f                      |              |                           | 
(5 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 1000 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
    1000 |                  0 | C
    1001 |                  0 | A
    1002 |                  0 | A
    1003 |                  0 | A
    1004 |                  0 | A
    1005 |                  0 | A
    1006 |                  0 | A
    1007 |                  0 | C
    1008 |                  0 | A
    1009 |                  0 | A
    1010 |                  0 | C
    1011 |                  0 | M
    1012 |                  0 | M
    1013 |                  0 | M
    1014 |                  0 | M
    1015 |                  0 | M
    1016 |                  0 | M
    1018 |                  0 | M
    1019 |                  0 | M
    1020 |                  0 | M
    1021 |                  0 | M
    1022 |                  0 | M
    1023 |                  0 | M
    1024 |                  0 | M
    1025 |                  0 | M
    1026 |                  0 | M
    1027 |                  0 | M
    1028 |                  0 | M
    1030 |                  0 | M
    1031 |                  0 | M
    1032 |                  0 | M
(31 rows)

-----------------------------
-- emaj_protect_group() tests
-----------------------------
-- group is unknown
select emaj.emaj_protect_group(NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 30 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'LOGGING,ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_protect_group(text) line 10 at PERFORM
select emaj.emaj_protect_group('unknownGroup');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'LOGGING,ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_protect_group(text) line 10 at PERFORM
-- group is not rollbackable
select emaj.emaj_protect_group('phil''s group#3",');
ERROR:  _check_group_names: The group "phil's group#3"," has been created as AUDIT_ONLY.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 61 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'LOGGING,ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_protect_group(text) line 10 at PERFORM
-- group is not in logging state
select emaj.emaj_protect_group('myGroup1');
ERROR:  _check_group_names: The group "myGroup1" is not in LOGGING state.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 87 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'LOGGING,ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_protect_group(text) line 10 at PERFORM
-- should be ok
select emaj.emaj_start_groups(array['myGroup1','emptyGroup'],'M1');
 emaj_start_groups 
-------------------
                 7
(1 row)

select emaj.emaj_protect_group('myGroup1');
 emaj_protect_group 
--------------------
                  1
(1 row)

select emaj.emaj_protect_group('emptyGroup');
 emaj_protect_group 
--------------------
                  1
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name in ('myGroup1','emptyGroup');
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | t
 t                | t
(2 rows)

-- protect an already protected group
select emaj.emaj_protect_group('myGroup1');
 emaj_protect_group 
--------------------
                  0
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | t
(1 row)

-- stop should reset the protection
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               7
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 f                | f
(1 row)

-----------------------------
-- emaj_unprotect_group() tests
-----------------------------
-- group is unknown
select emaj.emaj_unprotect_group(NULL);
ERROR:  _check_group_names: No group to process.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 30 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_unprotect_group(text) line 9 at PERFORM
select emaj.emaj_unprotect_group('unknownGroup');
ERROR:  _check_group_names: The group "unknownGroup" does not exist.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 42 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_unprotect_group(text) line 9 at PERFORM
-- group is not rollbackable
select emaj.emaj_unprotect_group('phil''s group#3",');
ERROR:  _check_group_names: The group "phil's group#3"," has been created as AUDIT_ONLY.
CONTEXT:  PL/pgSQL function emaj._check_group_names(text[],boolean,boolean,text) line 61 at RAISE
SQL statement "SELECT emaj._check_group_names(v_groupNames := ARRAY[v_groupName], v_mayBeNull := FALSE, v_lockGroups := TRUE,
                                    v_checkList := 'ROLLBACKABLE')"
PL/pgSQL function emaj.emaj_unprotect_group(text) line 9 at PERFORM
-- group is not in logging state
select emaj.emaj_unprotect_group('myGroup1');
 emaj_unprotect_group 
----------------------
                    0
(1 row)

-- should be ok
select emaj.emaj_start_group('myGroup1','M1');
 emaj_start_group 
------------------
                7
(1 row)

select emaj.emaj_protect_group('myGroup1');
 emaj_protect_group 
--------------------
                  1
(1 row)

select emaj.emaj_unprotect_group('myGroup1');
 emaj_unprotect_group 
----------------------
                    1
(1 row)

select emaj.emaj_unprotect_group('emptyGroup');
 emaj_unprotect_group 
----------------------
                    1
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name in ('myGroup1','emptyGroup');
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | f
 t                | f
(2 rows)

-- unprotect an already unprotected group
select emaj.emaj_unprotect_group('myGroup1');
 emaj_unprotect_group 
----------------------
                    0
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | f
(1 row)

select emaj.emaj_stop_groups(array['myGroup1','emptyGroup']);
 emaj_stop_groups 
------------------
                7
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 f                | f
(1 row)

-----------------------------
-- test end: (groups are stopped) reset history and force sequences id
-----------------------------
select emaj.emaj_enable_protection_by_event_triggers();
 emaj_enable_protection_by_event_triggers 
------------------------------------------
                                        3
(1 row)

select hist_id, hist_function, hist_event, hist_object, 
  regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g'),
  hist_user from emaj.emaj_hist order by hist_id;
 hist_id |   hist_function   |       hist_event       |                  hist_object                  |                                         regexp_replace                                         | hist_user 
---------+-------------------+------------------------+-----------------------------------------------+------------------------------------------------------------------------------------------------+-----------
    1059 | START_GROUP       | BEGIN                  | myGroup1                                      | With log reset                                                                                 | postgres
    1060 | PURGE_HISTORIES   |                        |                                               | 325 emaj_hist rows deleted ; 39 relation history rows deleted ; 46 alter groups events deleted | postgres
    1061 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1062 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1063 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | Mark1                                                                                          | postgres
    1064 | SET_MARK_GROUP    | END                    | myGroup1                                      | Mark1                                                                                          | postgres
    1065 | START_GROUP       | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1066 |                   | UPDATED PARAMETER      | history_retention                             | @ 100 years                                                                                    | postgres
    1067 | START_GROUP       | BEGIN                  | myGroup2                                      | With log reset                                                                                 | postgres
    1068 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1069 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1070 | SET_MARK_GROUP    | BEGIN                  | myGroup2                                      | Mark2                                                                                          | postgres
    1071 | SET_MARK_GROUP    | END                    | myGroup2                                      | Mark2                                                                                          | postgres
    1072 | START_GROUP       | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1073 |                   | DELETED PARAMETER      | history_retention                             |                                                                                                | postgres
    1074 | START_GROUP       | BEGIN                  | phil's group#3",                              | Without log reset                                                                              | postgres
    1075 | LOCK_GROUP        | BEGIN                  | phil's group#3",                              |                                                                                                | postgres
    1076 | LOCK_GROUP        | END                    | phil's group#3",                              | 2 tables locked, 0 deadlock(s)                                                                 | postgres
    1077 | SET_MARK_GROUP    | BEGIN                  | phil's group#3",                              | Mark3                                                                                          | postgres
    1078 | SET_MARK_GROUP    | END                    | phil's group#3",                              | Mark3                                                                                          | postgres
    1079 | START_GROUP       | END                    | phil's group#3",                              | 4 tables/sequences processed                                                                   | postgres
    1080 | START_GROUP       | BEGIN                  | emptyGroup                                    | With log reset                                                                                 | postgres
    1081 | LOCK_GROUP        | BEGIN                  | emptyGroup                                    |                                                                                                | postgres
    1082 | LOCK_GROUP        | END                    | emptyGroup                                    | 0 tables locked, 0 deadlock(s)                                                                 | postgres
    1083 | SET_MARK_GROUP    | BEGIN                  | emptyGroup                                    | Mark1                                                                                          | postgres
    1084 | SET_MARK_GROUP    | END                    | emptyGroup                                    | Mark1                                                                                          | postgres
    1085 | START_GROUP       | END                    | emptyGroup                                    | 0 tables/sequences processed                                                                   | postgres
    1086 | STOP_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1087 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1088 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1089 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | STOP_%                                                                                         | postgres
    1090 | SET_MARK_GROUP    | END                    | myGroup1                                      | STOP_%                                                                                         | postgres
    1091 | STOP_GROUP        | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1092 | STOP_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1093 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1094 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1095 | SET_MARK_GROUP    | BEGIN                  | myGroup2                                      | STOP_%                                                                                         | postgres
    1096 | SET_MARK_GROUP    | END                    | myGroup2                                      | STOP_%                                                                                         | postgres
    1097 | STOP_GROUP        | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1104 | START_GROUP       | BEGIN                  | myGroup1                                      | With log reset                                                                                 | postgres
    1105 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1106 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1107 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | %abc%                                                                                          | postgres
    1108 | SET_MARK_GROUP    | END                    | myGroup1                                      | %abc%                                                                                          | postgres
    1109 | START_GROUP       | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1110 | START_GROUP       | BEGIN                  | myGroup2                                      | Without log reset                                                                              | postgres
    1111 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1112 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1113 | SET_MARK_GROUP    | BEGIN                  | myGroup2                                      | START_%                                                                                        | postgres
    1114 | SET_MARK_GROUP    | END                    | myGroup2                                      | START_%                                                                                        | postgres
    1115 | START_GROUP       | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1127 | STOP_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1128 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1129 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1130 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | STOP_%                                                                                         | postgres
    1131 | SET_MARK_GROUP    | END                    | myGroup1                                      | STOP_%                                                                                         | postgres
    1132 | STOP_GROUP        | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1133 | STOP_GROUP        | BEGIN                  | emptyGroup                                    |                                                                                                | postgres
    1134 | LOCK_GROUP        | BEGIN                  | emptyGroup                                    |                                                                                                | postgres
    1135 | LOCK_GROUP        | END                    | emptyGroup                                    | 0 tables locked, 0 deadlock(s)                                                                 | postgres
    1136 | SET_MARK_GROUP    | BEGIN                  | emptyGroup                                    | STOP_%                                                                                         | postgres
    1137 | SET_MARK_GROUP    | END                    | emptyGroup                                    | STOP_%                                                                                         | postgres
    1138 | STOP_GROUP        | END                    | emptyGroup                                    | 0 tables/sequences processed                                                                   | postgres
    1139 | STOP_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1140 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1141 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1142 | SET_MARK_GROUP    | BEGIN                  | myGroup2                                      | Stop mark                                                                                      | postgres
    1143 | SET_MARK_GROUP    | END                    | myGroup2                                      | Stop mark                                                                                      | postgres
    1144 | STOP_GROUP        | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1145 | STOP_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1146 | STOP_GROUP        | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1147 | STOP_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1148 | STOP_GROUP        | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1149 | START_GROUP       | BEGIN                  | myGroup1                                      | With log reset                                                                                 | postgres
    1150 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1151 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1152 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | START_%                                                                                        | postgres
    1153 | SET_MARK_GROUP    | END                    | myGroup1                                      | START_%                                                                                        | postgres
    1154 | START_GROUP       | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1155 | START_GROUP       | BEGIN                  | myGroup2                                      | With log reset                                                                                 | postgres
    1156 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1157 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1158 | SET_MARK_GROUP    | BEGIN                  | myGroup2                                      | START_%                                                                                        | postgres
    1159 | SET_MARK_GROUP    | END                    | myGroup2                                      | START_%                                                                                        | postgres
    1160 | START_GROUP       | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1161 | STOP_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1162 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1163 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1164 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | STOP_%                                                                                         | postgres
    1165 | SET_MARK_GROUP    | END                    | myGroup1                                      | STOP_%                                                                                         | postgres
    1166 | STOP_GROUP        | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1167 | STOP_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1168 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1169 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1170 | SET_MARK_GROUP    | BEGIN                  | myGroup2                                      | STOP_%                                                                                         | postgres
    1171 | SET_MARK_GROUP    | END                    | myGroup2                                      | STOP_%                                                                                         | postgres
    1172 | STOP_GROUP        | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1173 | STOP_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1174 | STOP_GROUP        | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1175 | START_GROUPS      | BEGIN                  |                                               | Without log reset                                                                              | postgres
    1176 | START_GROUPS      | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1177 | START_GROUPS      | BEGIN                  |                                               | With log reset                                                                                 | postgres
    1178 | START_GROUPS      | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1182 | START_GROUPS      | BEGIN                  | myGroup1,myGroup2                             | With log reset                                                                                 | postgres
    1183 | LOCK_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1184 | LOCK_GROUPS       | END                    | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)                                                                | postgres
    1185 | SET_MARK_GROUPS   | BEGIN                  | myGroup1,myGroup2                             | Mark1                                                                                          | postgres
    1186 | SET_MARK_GROUPS   | END                    | myGroup1,myGroup2                             | Mark1                                                                                          | postgres
    1187 | START_GROUPS      | END                    | myGroup1,myGroup2                             | 15 tables/sequences processed                                                                  | postgres
    1189 | STOP_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1190 | LOCK_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1191 | LOCK_GROUPS       | END                    | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)                                                                | postgres
    1192 | SET_MARK_GROUPS   | BEGIN                  | myGroup1,myGroup2                             | STOP_%                                                                                         | postgres
    1193 | SET_MARK_GROUPS   | END                    | myGroup1,myGroup2                             | STOP_%                                                                                         | postgres
    1194 | STOP_GROUPS       | END                    | myGroup1,myGroup2                             | 15 tables/sequences processed                                                                  | postgres
    1202 | START_GROUPS      | BEGIN                  | myGroup1,myGroup2                             | With log reset                                                                                 | postgres
    1203 | LOCK_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1204 | LOCK_GROUPS       | END                    | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)                                                                | postgres
    1205 | SET_MARK_GROUPS   | BEGIN                  | myGroup1,myGroup2                             | Mark1                                                                                          | postgres
    1206 | SET_MARK_GROUPS   | END                    | myGroup1,myGroup2                             | Mark1                                                                                          | postgres
    1207 | START_GROUPS      | END                    | myGroup1,myGroup2                             | 15 tables/sequences processed                                                                  | postgres
    1208 | STOP_GROUPS       | BEGIN                  |                                               |                                                                                                | postgres
    1209 | STOP_GROUPS       | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1210 | STOP_GROUPS       | BEGIN                  |                                               |                                                                                                | postgres
    1211 | STOP_GROUPS       | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1217 | STOP_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1218 | LOCK_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1219 | LOCK_GROUPS       | END                    | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)                                                                | postgres
    1220 | SET_MARK_GROUPS   | BEGIN                  | myGroup1,myGroup2                             | Global Stop at %                                                                               | postgres
    1221 | SET_MARK_GROUPS   | END                    | myGroup1,myGroup2                             | Global Stop at %                                                                               | postgres
    1222 | STOP_GROUPS       | END                    | myGroup1,myGroup2                             | 15 tables/sequences processed                                                                  | postgres
    1223 | STOP_GROUPS       | BEGIN                  | myGroup1,myGroup2,,myGroup2,myGroup2,myGroup1 |                                                                                                | postgres
    1224 | STOP_GROUPS       | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1225 | START_GROUPS      | BEGIN                  | myGroup1,myGroup2                             | With log reset                                                                                 | postgres
    1226 | LOCK_GROUPS       | BEGIN                  | myGroup1,myGroup2                             |                                                                                                | postgres
    1227 | LOCK_GROUPS       | END                    | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)                                                                | postgres
    1228 | SET_MARK_GROUPS   | BEGIN                  | myGroup1,myGroup2                             | Mark1                                                                                          | postgres
    1229 | SET_MARK_GROUPS   | END                    | myGroup1,myGroup2                             | Mark1                                                                                          | postgres
    1230 | START_GROUPS      | END                    | myGroup1,myGroup2                             | 15 tables/sequences processed                                                                  | postgres
    1249 | FORCE_STOP_GROUP  | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1250 | LOCK_GROUP        | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1251 | LOCK_GROUP        | END                    | myGroup2                                      | 6 tables locked, 0 deadlock(s)                                                                 | postgres
    1252 | FORCE_STOP_GROUP  | END                    | myGroup2                                      | 8 tables/sequences processed                                                                   | postgres
    1253 | FORCE_STOP_GROUP  | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1254 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1255 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1256 | FORCE_STOP_GROUP  | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1257 | FORCE_STOP_GROUP  | BEGIN                  | myGroup2                                      |                                                                                                | postgres
    1258 | FORCE_STOP_GROUP  | END                    |                                               | 0 tables/sequences processed                                                                   | postgres
    1259 | START_GROUPS      | BEGIN                  | myGroup1,emptyGroup                           | With log reset                                                                                 | postgres
    1260 | LOCK_GROUPS       | BEGIN                  | emptyGroup,myGroup1                           |                                                                                                | postgres
    1261 | LOCK_GROUPS       | END                    | emptyGroup,myGroup1                           | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1262 | SET_MARK_GROUPS   | BEGIN                  | emptyGroup,myGroup1                           | M1                                                                                             | postgres
    1263 | SET_MARK_GROUPS   | END                    | emptyGroup,myGroup1                           | M1                                                                                             | postgres
    1264 | START_GROUPS      | END                    | emptyGroup,myGroup1                           | 7 tables/sequences processed                                                                   | postgres
    1265 | PROTECT_GROUP     |                        | myGroup1                                      | Status 1                                                                                       | postgres
    1266 | PROTECT_GROUP     |                        | emptyGroup                                    | Status 1                                                                                       | postgres
    1267 | PROTECT_GROUP     |                        | myGroup1                                      | Status 0                                                                                       | postgres
    1268 | STOP_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1269 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1270 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1271 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | STOP_%                                                                                         | postgres
    1272 | SET_MARK_GROUP    | END                    | myGroup1                                      | STOP_%                                                                                         | postgres
    1273 | STOP_GROUP        | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1274 | UNPROTECT_GROUP   |                        | myGroup1                                      | Status 0                                                                                       | postgres
    1275 | START_GROUP       | BEGIN                  | myGroup1                                      | With log reset                                                                                 | postgres
    1276 | LOCK_GROUP        | BEGIN                  | myGroup1                                      |                                                                                                | postgres
    1277 | LOCK_GROUP        | END                    | myGroup1                                      | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1278 | SET_MARK_GROUP    | BEGIN                  | myGroup1                                      | M1                                                                                             | postgres
    1279 | SET_MARK_GROUP    | END                    | myGroup1                                      | M1                                                                                             | postgres
    1280 | START_GROUP       | END                    | myGroup1                                      | 7 tables/sequences processed                                                                   | postgres
    1281 | PROTECT_GROUP     |                        | myGroup1                                      | Status 1                                                                                       | postgres
    1282 | UNPROTECT_GROUP   |                        | myGroup1                                      | Status 1                                                                                       | postgres
    1283 | UNPROTECT_GROUP   |                        | emptyGroup                                    | Status 1                                                                                       | postgres
    1284 | UNPROTECT_GROUP   |                        | myGroup1                                      | Status 0                                                                                       | postgres
    1285 | STOP_GROUPS       | BEGIN                  | myGroup1,emptyGroup                           |                                                                                                | postgres
    1286 | LOCK_GROUPS       | BEGIN                  | emptyGroup,myGroup1                           |                                                                                                | postgres
    1287 | LOCK_GROUPS       | END                    | emptyGroup,myGroup1                           | 5 tables locked, 0 deadlock(s)                                                                 | postgres
    1288 | SET_MARK_GROUPS   | BEGIN                  | emptyGroup,myGroup1                           | STOP_%                                                                                         | postgres
    1289 | SET_MARK_GROUPS   | END                    | emptyGroup,myGroup1                           | STOP_%                                                                                         | postgres
    1290 | STOP_GROUPS       | END                    | emptyGroup,myGroup1                           | 7 tables/sequences processed                                                                   | postgres
    1291 | ENABLE_PROTECTION | EVENT TRIGGERS ENABLED |                                               | emaj_protection_trg, emaj_sql_drop_trg, emaj_table_rewrite_trg                                 | postgres
(182 rows)

