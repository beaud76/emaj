-- misc.sql : test miscellaneous functions
--
-----------------------------
-- emaj_reset_group() test
-----------------------------
-- group is unknown in emaj_group_def
select emaj.emaj_reset_group(NULL);
ERROR:  emaj_reset_group: group <NULL> has not been created.
select emaj.emaj_reset_group('unknownGroup');
ERROR:  emaj_reset_group: group unknownGroup has not been created.
-- group not in logging state
select emaj.emaj_reset_group('myGroup1');
ERROR:  emaj_reset_group: Group myGroup1 cannot be reset because it is not in idle state. An emaj_stop_group function must be previously executed.
-- stop group
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

-- log tables are not yet empty
select count(*) from emaj.myschema1_mytbl1_log;
 count 
-------
    18
(1 row)

select count(*) from emaj.myschema1_mytbl2_log;
 count 
-------
     2
(1 row)

select count(*) from emajb.myschema1_mytbl2b_log;
 count 
-------
     2
(1 row)

select count(*) from "emajC"."myschema1_myTbl3_log";
 count 
-------
    10
(1 row)

select count(*) from emaj.myschema1_mytbl4_log;
 count 
-------
     1
(1 row)

-- should be OK
select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                6
(1 row)

select count(*) from emaj.myschema1_mytbl1_log;
 count 
-------
     0
(1 row)

select count(*) from emaj.myschema1_mytbl2_log;
 count 
-------
     0
(1 row)

select count(*) from emajb.myschema1_mytbl2b_log;
 count 
-------
     0
(1 row)

select count(*) from "emajC"."myschema1_myTbl3_log";
 count 
-------
     0
(1 row)

select count(*) from emaj.myschema1_mytbl4_log;
 count 
-------
     0
(1 row)

-----------------------------
-- log updates on myschema2 between 3 marks
-----------------------------
set search_path=myschema2;
-- inserts/updates/deletes in myTbl1, myTbl2 and myTbl2b (via trigger)
insert into myTbl1 select i, 'ABC', E'\\014'::bytea from generate_series (1,10100) as i;
update myTbl1 set col13=E'\\034'::bytea where col11 <= 500;
delete from myTbl1 where col11 > 10000;
insert into myTbl2 select i, 'DEF', current_date from generate_series (1,900) as i;
-- set a mark
select emaj.emaj_set_mark_group('myGroup2','Mark22');
 emaj_set_mark_group 
---------------------
                   8
(1 row)

-- inserts/updates/deletes in myTbl3 and myTbl4
insert into "myTbl3" (col33) select generate_series(1000,1039,4)/100;
insert into myTbl4 select i,'FK...',i,1,'ABC' from generate_series (1,100) as i;
-- set a mark
select emaj.emaj_set_mark_group('myGroup2','Mark23');
 emaj_set_mark_group 
---------------------
                   8
(1 row)

-----------------------------
-- emaj_log_stat_group() and emaj_detailled_log_stat_group() test
-----------------------------
-- group is unknown in emaj_group_def
select * from emaj.emaj_log_stat_group(NULL,NULL,NULL);
ERROR:  emaj_log_stat_group: group <NULL> has not been created.
select * from emaj.emaj_log_stat_group('unknownGroup',NULL,NULL);
ERROR:  emaj_log_stat_group: group unknownGroup has not been created.
select * from emaj.emaj_detailed_log_stat_group(NULL,NULL,NULL);
ERROR:  emaj_detailed_log_stat_group: group <NULL> has not been created.
select * from emaj.emaj_detailed_log_stat_group('unknownGroup',NULL,NULL);
ERROR:  emaj_detailed_log_stat_group: group unknownGroup has not been created.
-- invalid marks
select * from emaj.emaj_log_stat_group('myGroup2','dummyStartMark',NULL);
ERROR:  emaj_log_stat_group: Start mark dummyStartMark is unknown for group myGroup2.
select * from emaj.emaj_log_stat_group('myGroup2',NULL,'dummyEndMark');
ERROR:  emaj_log_stat_group: End mark dummyEndMark is unknown for group myGroup2.
select * from emaj.emaj_detailed_log_stat_group('myGroup2','dummyStartMark',NULL);
ERROR:  emaj_detailed_log_stat_group: Start mark dummyStartMark is unknown for group myGroup2.
select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'dummyEndMark');
ERROR:  emaj_detailed_log_stat_group: End mark dummyEndMark is unknown for group myGroup2.
-- start mark > end mark
-- just check the error is trapped, because the error message contents timestamps
create function test_log(v_groupName TEXT, v_firstMark TEXT, v_lastMark TEXT) returns void language plpgsql as 
$$
begin
  begin
    perform count(*) from emaj.emaj_log_stat_group(v_groupName,v_firstMark,v_lastMark);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_log_stat_group() call';
  end;
  begin
    perform count(*) from emaj.emaj_detailed_log_stat_group(v_groupName,v_firstMark,v_lastMark);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_detailed_log_stat_group() call';
  end;
  return;
end;
$$;
select test_log('myGroup2','Mark23','Mark22');
NOTICE:  Error trapped on emaj_log_stat_group() call
NOTICE:  Error trapped on emaj_detailed_log_stat_group() call
 test_log 
----------
 
(1 row)

select test_log('myGroup2','EMAJ_LAST_MARK','Mark22');
NOTICE:  Error trapped on emaj_log_stat_group() call
NOTICE:  Error trapped on emaj_detailed_log_stat_group() call
 test_log 
----------
 
(1 row)

drop function test_log(text,text,text);
-- should be ok
select * from emaj.emaj_log_stat_group('myGroup2',NULL,NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark21',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark21','EMAJ_LAST_MARK')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2',NULL,'Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |     10700
 myGroup2   | myschema2   | mytbl2     |       900
 myGroup2   | myschema2   | myTbl3     |         0
 myGroup2   | myschema2   | mytbl4     |         0
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark22','Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |         0
 myGroup2   | myschema2   | mytbl2     |         0
 myGroup2   | myschema2   | myTbl3     |         0
 myGroup2   | myschema2   | mytbl4     |         0
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','Mark22','Mark23')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |         0
 myGroup2   | myschema2   | mytbl2     |         0
 myGroup2   | myschema2   | myTbl3     |        10
 myGroup2   | myschema2   | mytbl4     |       100
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_log_stat_group('myGroup2','EMAJ_LAST_MARK','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup2   | myschema2   | mytbl1     |         0
 myGroup2   | myschema2   | mytbl2     |         0
 myGroup2   | myschema2   | myTbl3     |         0
 myGroup2   | myschema2   | mytbl4     |         0
 myGroup2   | myschema2   | mytbl5     |         0
 myGroup2   | myschema2   | mytbl6     |         0
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21',NULL)
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21','EMAJ_LAST_MARK')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(6 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | mytbl1     | postgres  | DELETE    |       100
 myGroup2   | myschema2   | mytbl1     | postgres  | INSERT    |     10100
 myGroup2   | myschema2   | mytbl1     | postgres  | UPDATE    |       500
 myGroup2   | myschema2   | mytbl2     | postgres  | INSERT    |       900
(4 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark22','Mark22')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
(0 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','Mark22','Mark23')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
 myGroup2   | myschema2   | myTbl3     | postgres  | INSERT    |        10
 myGroup2   | myschema2   | mytbl4     | postgres  | INSERT    |       100
(2 rows)

select * from emaj.emaj_detailed_log_stat_group('myGroup2','EMAJ_LAST_MARK','')
  order by stat_group, stat_schema, stat_table;
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
(0 rows)

-- groups without any mark
begin;
  select emaj.emaj_reset_group('myGroup1');
 emaj_reset_group 
------------------
                6
(1 row)

  select * from emaj.emaj_log_stat_group('myGroup1',NULL,NULL);
 stat_group | stat_schema | stat_table | stat_rows 
------------+-------------+------------+-----------
 myGroup1   | myschema1   | myTbl3     |         0
 myGroup1   | myschema1   | mytbl1     |         0
 myGroup1   | myschema1   | mytbl4     |         0
 myGroup1   | myschema1   | mytbl2     |         0
 myGroup1   | myschema1   | mytbl2b    |         0
(5 rows)

  select * from emaj.emaj_detailed_log_stat_group('myGroup1',NULL,NULL);
 stat_group | stat_schema | stat_table | stat_role | stat_verb | stat_rows 
------------+-------------+------------+-----------+-----------+-----------
(0 rows)

rollback;
-----------------------------
-- emaj_estimate_rollback_duration() test
-----------------------------
-- group is unknown in emaj_group_def
select emaj.emaj_estimate_rollback_duration(NULL,NULL);
ERROR:  emaj_estimate_rollback_duration: group <NULL> has not been created or is not in LOGGING state.
select emaj.emaj_estimate_rollback_duration('unknownGroup',NULL);
ERROR:  emaj_estimate_rollback_duration: group unknownGroup has not been created or is not in LOGGING state.
-- invalid marks
select emaj.emaj_estimate_rollback_duration('myGroup2','dummyMark');
ERROR:  emaj_estimate_rollback_duration: no mark dummyMark exists for group myGroup2.
-- group not in logging state
select emaj.emaj_start_group('myGroup1','Mark11');
 emaj_start_group 
------------------
                6
(1 row)

select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

select emaj.emaj_estimate_rollback_duration('myGroup1','Mark11');
ERROR:  emaj_estimate_rollback_duration: group myGroup1 has not been created or is not in LOGGING state.
-- insert 2 timing parameters (=> so use 2 default values)
INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_table_rollback_duration','5 millisecond'::interval);
INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('fixed_table_with_rollback_duration','2.5 millisecond'::interval);
-- analyze tables to get proper reltuples statistics
analyze myschema2.mytbl4;
-- estimate with empty rollback statistics and default parameters
delete from emaj.emaj_rlbk_stat;
select emaj.emaj_estimate_rollback_duration('myGroup2','Mark21');
 emaj_estimate_rollback_duration 
---------------------------------
 @ 1.34 secs
(1 row)

select 8 * 0.005 + 4 * 0.0025             -- fixed cost
       + 11710 * 0.0001                   -- rollback
       + 11710 * 0.00001                  -- log deletion
       + 1000 * 0.000005;                  -- fkey checks
 ?column? 
----------
 1.343100
(1 row)

-- estimates with empty rollback statistics but temporarily modified parameters
begin;
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_row_rollback_duration','150 microsecond'::interval);
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_row_delete_log_duration','12 microsecond'::interval);
  INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('avg_fkey_check_duration','27 microsecond'::interval);
  UPDATE emaj.emaj_param SET param_value_interval = '7 millisecond'::interval WHERE param_key = 'fixed_table_rollback_duration';
  UPDATE emaj.emaj_param SET param_value_interval = '2.8 millisecond'::interval WHERE param_key = 'fixed_table_with_rollback_duration';
  select emaj.emaj_estimate_rollback_duration('myGroup2','Mark21');
 emaj_estimate_rollback_duration 
---------------------------------
 @ 1.99 secs
(1 row)

rollback;
select 8 * 0.007 + 4 * 0.0028              -- fixed cost
       + 11710 * 0.00015                   -- rollback
       + 11710 * 0.000012                  -- log deletion
       + 1000 * 0.000027;                  -- fkey checks
 ?column? 
----------
 1.991220
(1 row)

-- estimate with added rollback statistics about fkey recreation and checks
insert into emaj.emaj_rlbk_stat values
  ('add_fk','myschema2','mytbl4_col44_fkey','2000/01/01 00:01:00',300,'0.036 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('set_fk_immediate','myschema2','mytbl4_col43_fkey','2000/01/01 00:01:00',2000,'0.030 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('add_fk','myschema2','mytbl4_col44_fkey','2000/01/01 00:02:00',200,'0.020 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('set_fk_immediate','myschema2','mytbl4_col43_fkey','2000/01/01 00:02:00',1200,'0.015 SECONDS'::interval);
select emaj.emaj_estimate_rollback_duration('myGroup2','Mark21');
 emaj_estimate_rollback_duration 
---------------------------------
 @ 1.36 secs
(1 row)

select 8 * 0.005 + 4 * 0.0025                                   -- fixed cost
       + 11710 * 0.0001                                         -- rollback
       + 11710 * 0.00001                                        -- log deletion
       + ((0.036 + 0.020)*100)/(300+200)                        -- fkey recreation
       + ((0.030 + 0.015)*1000)/(2000+1200);                    -- fkey checks
        ?column?        
------------------------
 1.36336250000000000000
(1 row)

-- estimate with added statistics about tables rollbacks
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','mytbl1','2000/01/01 00:01:00',5350,'1.000 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','mytbl2','2000/01/01 00:01:00',100,'0.004 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','mytbl2','2000/01/01 00:02:00',200,'0.010 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','mytbl2','2000/01/01 00:03:00',20000,'1.610 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','myTbl3','2000/01/01 00:01:00',99,'0.004 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','myTbl3','2000/01/01 00:02:00',101,'0.008 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('rlbk','myschema2','mytbl4','2000/01/01 00:01:00',50000,'3.600 SECONDS'::interval);
select emaj.emaj_estimate_rollback_duration('myGroup2','Mark21');
 emaj_estimate_rollback_duration 
---------------------------------
 @ 2.24 secs
(1 row)

select 8 * 0.005 + 4 * 0.0025                                   -- fixed cost
       + (1.000 * 10700) / 5350 + (0.004+0.010)*900/(100+200)   -- rollback
       + (0.004 * 10) / 99 + (3.600 * 100) / 50000
       + (10700 + 900 + 10 + 100) * 0.00001                     -- log deletion
       + ((0.036 + 0.020)*100)/(300+200)                        -- fkey recreation
       + ((0.030 + 0.015)*1000)/(2000+1200);                    -- fkey checks
        ?column?        
------------------------
 2.24196654040404040404
(1 row)

-- estimate with added statistics about log deletes
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','mytbl1','2000/01/01 00:01:00',5350,'0.250 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','mytbl2','2000/01/01 00:01:00',100,'0.001 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','mytbl2','2000/01/01 00:02:00',200,'0.003 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','mytbl2','2000/01/01 00:03:00',20000,'1.610 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','myTbl3','2000/01/01 00:01:00',99,'0.001 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','myTbl3','2000/01/01 00:02:00',101,'0.002 SECONDS'::interval);
insert into emaj.emaj_rlbk_stat values
  ('del_log','myschema2','mytbl4','2000/01/01 00:01:00',50000,'0.900 SECONDS'::interval);
select emaj.emaj_estimate_rollback_duration('myGroup2','Mark21');
 emaj_estimate_rollback_duration 
---------------------------------
 @ 2.64 secs
(1 row)

select 8 * 0.005 + 4 * 0.0025                                   -- fixed cost
       + (1.000 * 10700) / 5350 + (0.004+0.010)*900/(100+200)   -- rollback
       + (0.004 * 10) / 99 + (3.600 * 100) / 50000
       + (0.250 * 10700) / 5350 + (0.001+0.003)*900/(100+200)   -- log deletion
       + (0.001 * 10) / 99 + (0.900 * 100) / 50000
       + ((0.036 + 0.020)*100)/(300+200)                        -- fkey recreation
       + ((0.030 + 0.015)*1000)/(2000+1200);                    -- fkey checks
        ?column?        
------------------------
 2.63876755050505050505
(1 row)

-- delete all manualy inserted rollback statistics and cleanup the statistics table
delete from emaj.emaj_rlbk_stat;
vacuum emaj.emaj_rlbk_stat;
-----------------------------
-- emaj_snap_group() and  emaj_snap_log_group() test
-----------------------------
-- set/reset directory for snaps
\! mkdir -p /tmp/emaj_test/snaps
\! rm -R /tmp/emaj_test/snaps
\! mkdir /tmp/emaj_test/snaps
-- group is unknown in emaj_group_def
select emaj.emaj_snap_group(NULL,NULL,NULL);
ERROR:  emaj_snap_group: group <NULL> has not been created.
select emaj.emaj_snap_group('unknownGroup',NULL,NULL);
ERROR:  emaj_snap_group: group unknownGroup has not been created.
-- invalid directory
select emaj.emaj_snap_group('myGroup1',NULL,NULL);
ERROR:  emaj_snap_group: directory parameter cannot be NULL
select emaj.emaj_snap_group('myGroup1','unknown_directory',NULL);
ERROR:  relative path not allowed for COPY to file
CONTEXT:  SQL statement "COPY (SELECT sequence_name, last_value, 0, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO 'unknown_directory/myschema1_myTbl3_col31_seq.snap' "
PL/pgSQL function "emaj_snap_group" line 102 at EXECUTE statement
select emaj.emaj_snap_group('myGroup1','/unknown_directory',NULL);
ERROR:  could not open file "/unknown_directory/myschema1_myTbl3_col31_seq.snap" for writing: No such file or directory
CONTEXT:  SQL statement "COPY (SELECT sequence_name, last_value, 0, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO '/unknown_directory/myschema1_myTbl3_col31_seq.snap' "
PL/pgSQL function "emaj_snap_group" line 102 at EXECUTE statement
-- invalid COPY TO options
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','dummy_option');
ERROR:  syntax error at or near "dummy_option"
LINE 1: .../emaj_test/snaps/myschema1_myTbl3_col31_seq.snap' dummy_opti...
                                                             ^
QUERY:  COPY (SELECT sequence_name, last_value, 0, increment_by, max_value, min_value, cache_value, is_cycled, is_called FROM myschema1."myTbl3_col31_seq") TO '/tmp/emaj_test/snaps/myschema1_myTbl3_col31_seq.snap' dummy_option
CONTEXT:  PL/pgSQL function "emaj_snap_group" line 102 at EXECUTE statement
-- SQL injection attempt
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','; CREATE ROLE fake LOGIN PASSWORD '''' SUPERUSER');
ERROR:  emaj_snap_group: invalid COPY options parameter format
-- should be OK (even when executed twice, files being overwriten)
select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','');
 emaj_snap_group 
-----------------
               6
(1 row)

select emaj.emaj_snap_group('myGroup1','/tmp/emaj_test/snaps','CSV HEADER DELIMITER '';'' ');
 emaj_snap_group 
-----------------
               6
(1 row)

\! ls /tmp/emaj_test/snaps
_INFO
myschema1_myTbl3.snap
myschema1_myTbl3_col31_seq.snap
myschema1_mytbl1.snap
myschema1_mytbl2.snap
myschema1_mytbl2b.snap
myschema1_mytbl4.snap
-- set/reset directory for log snaps
\! mkdir -p /tmp/emaj_test/log_snaps
\! rm -R /tmp/emaj_test/log_snaps
\! mkdir /tmp/emaj_test/log_snaps
-- group is unknown in emaj_group_def
select emaj.emaj_snap_log_group(NULL,NULL,NULL,NULL,NULL);
ERROR:  emaj_snap_log_group: group <NULL> has not been created.
select emaj.emaj_snap_log_group('unknownGroup',NULL,NULL,NULL,NULL);
ERROR:  emaj_snap_log_group: group unknownGroup has not been created.
-- invalid start mark
select emaj.emaj_snap_log_group('myGroup2','unknownMark','EMAJ_LAST_MARK',NULL,NULL);
ERROR:  emaj_snap_log_group: Start mark unknownMark is unknown for group myGroup2.
-- invalid end mark
select emaj.emaj_snap_log_group('myGroup2','','unknownMark',NULL,NULL);
ERROR:  emaj_snap_log_group: End mark unknownMark is unknown for group myGroup2.
-- start mark > end mark
-- just check the error is trapped, because the error message contents timestamps
create function test_snap_log(v_groupName TEXT, v_firstMark TEXT, v_lastMark TEXT) returns void language plpgsql as 
$$
begin
  begin
    perform emaj.emaj_snap_log_group(v_groupName,v_firstMark,v_lastMark,'/tmp/emaj_test/log_snaps',NULL);
    return;
  exception when raise_exception then
    raise notice 'Error trapped on emaj_snap_log_group() call';
  end;
  return;
end;
$$;
select test_snap_log('myGroup2','Mark23','Mark21');
NOTICE:  Error trapped on emaj_snap_log_group() call
 test_snap_log 
---------------
 
(1 row)

select test_snap_log('myGroup2','EMAJ_LAST_MARK','Mark22');
NOTICE:  Error trapped on emaj_snap_log_group() call
 test_snap_log 
---------------
 
(1 row)

drop function test_snap_log(text,text,text);
-- invalid directory
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK',NULL,NULL);
ERROR:  emaj_snap_log_group: directory parameter cannot be NULL
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','unknown_directory',NULL);
ERROR:  relative path not allowed for COPY to file
CONTEXT:  SQL statement "COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11840 ORDER BY emaj_gid ASC) TO 'unknown_directory/myschema2_mytbl1_log.snap' "
PL/pgSQL function "emaj_snap_log_group" line 111 at EXECUTE statement
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/unknown_directory',NULL);
ERROR:  could not open file "/unknown_directory/myschema2_mytbl1_log.snap" for writing: No such file or directory
CONTEXT:  SQL statement "COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11840 ORDER BY emaj_gid ASC) TO '/unknown_directory/myschema2_mytbl1_log.snap' "
PL/pgSQL function "emaj_snap_log_group" line 111 at EXECUTE statement
-- invalid COPY TO options
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps', 'dummy_option');
ERROR:  syntax error at or near "dummy_option"
LINE 1: ...mp/emaj_test/log_snaps/myschema2_mytbl1_log.snap' dummy_opti...
                                                             ^
QUERY:  COPY (SELECT * FROM emaj.myschema2_mytbl1_log WHERE TRUE AND emaj_gid <= 11840 ORDER BY emaj_gid ASC) TO '/tmp/emaj_test/log_snaps/myschema2_mytbl1_log.snap' dummy_option
CONTEXT:  PL/pgSQL function "emaj_snap_log_group" line 111 at EXECUTE statement
-- SQL injection attempt
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps','; CREATE ROLE fake LOGIN PASSWORD '''' SUPERUSER');
ERROR:  emaj_snap_log_group: invalid COPY options parameter format
-- should be ok
select emaj.emaj_snap_log_group('myGroup2',NULL,'EMAJ_LAST_MARK','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','','','/tmp/emaj_test/log_snaps','CSV');
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21',NULL,'/tmp/emaj_test/log_snaps','CSV HEADER');
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21','Mark21','/tmp/emaj_test/log_snaps','CSV');
 emaj_snap_log_group 
---------------------
                   8
(1 row)

select emaj.emaj_snap_log_group('myGroup2','Mark21','Mark23','/tmp/emaj_test/log_snaps',NULL);
 emaj_snap_log_group 
---------------------
                   8
(1 row)

\! ls /tmp/emaj_test/log_snaps |sed s/[0-9][0-9].[0-9][0-9].[0-9][0-9].[0-9][0-9][0-9]/\[timestamp_mask\]/g
_INFO
myGroup2_sequences_at_[timestamp_mask]
myGroup2_sequences_at_[timestamp_mask]
myGroup2_sequences_at_Mark21
myGroup2_sequences_at_Mark23
myschema2_myTbl3_log.snap
myschema2_mytbl1_log.snap
myschema2_mytbl2_log.snap
myschema2_mytbl4_log.snap
myschema2_mytbl5_log.snap
myschema2_mytbl6_log.snap
-----------------------------
-- emaj_generate_sql() test
-----------------------------
-- set/reset directory for snaps
\! mkdir -p /tmp/emaj_test/sql_scripts
\! rm -R /tmp/emaj_test/sql_scripts
\! mkdir /tmp/emaj_test/sql_scripts
-- group is unknown in emaj_group_def
select emaj.emaj_generate_sql(NULL, NULL, NULL, NULL);
ERROR:  emaj_generate_sql: group <NULL> has not been created.
select emaj.emaj_generate_sql('unknownGroup', NULL, NULL, NULL);
ERROR:  emaj_generate_sql: group unknownGroup has not been created.
-- invalid start mark
select emaj.emaj_generate_sql('myGroup2', 'unknownMark', NULL, NULL);
ERROR:  emaj_generate_sql: Start mark unknownMark is unknown for group myGroup2.
-- invalid end mark
select emaj.emaj_generate_sql('myGroup2', NULL, 'unknownMark', NULL);
ERROR:  emaj_generate_sql: End mark unknownMark is unknown for group myGroup2.
-- end mark is prior start mark
begin;
-- (mark timestamps are temporarily changed so that regression test can return a stable error message)
  update emaj.emaj_mark set mark_datetime = '2000-01-01 12:00:00+00' 
    where mark_group = 'myGroup2' and mark_name = 'Mark21';
  update emaj.emaj_mark set mark_datetime = '2000-01-01 13:00:00+00'
    where mark_group = 'myGroup2' and mark_name = 'Mark22';
  select emaj.emaj_generate_sql('myGroup2', 'Mark22', 'Mark21', NULL);
ERROR:  emaj_generate_sql: mark id for Mark22 (501 = Sat Jan 01 05:00:00 2000 PST) is greater than mark id for Mark21 (425 = Sat Jan 01 04:00:00 2000 PST).
rollback;
-- invalid location path name
select emaj.emaj_generate_sql('myGroup1', NULL, NULL, NULL);
ERROR:  emaj_generate_sql: file <NULL> cannot be used as script output file.
select emaj.emaj_generate_sql('myGroup1', NULL, NULL, '/tmp/unknownDirectory/myFile');
ERROR:  emaj_generate_sql: file /tmp/unknownDirectory/myFile cannot be used as script output file.
-- the tables group contains a table without pkey
select emaj.emaj_generate_sql('phil''s group#3",', NULL, NULL, '/tmp/emaj_test/sql_scripts/Group3');
ERROR:  emaj_generate_sql: Tables group phil's group#3", contains 1 tables without pkey.
-- should be ok (generated files content is checked later in adm2.sql scenario)
-- (getting counters from detailed log statistics + the number of sequences included in the group allows a comparison with the result of emaj_generate_sql function)
select emaj.emaj_generate_sql('myGroup2', NULL, NULL, '/tmp/emaj_test/sql_scripts/myFile');
NOTICE:  table "emaj_temp_script" does not exist, skipping
CONTEXT:  SQL statement "DROP TABLE IF EXISTS emaj_temp_script"
PL/pgSQL function "emaj_generate_sql" line 121 at SQL statement
 emaj_generate_sql 
-------------------
             11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,NULL);
 check 
-------
 11712
(1 row)

select emaj.emaj_generate_sql('myGroup2', 'Mark21', NULL, '/tmp/emaj_test/sql_scripts/myFile');
 emaj_generate_sql 
-------------------
             11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2','Mark21',NULL);
 check 
-------
 11712
(1 row)

select emaj.emaj_generate_sql('myGroup2', NULL, 'Mark22', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_generate_sql 
-------------------
             11602
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'Mark22');
 check 
-------
 11602
(1 row)

select emaj.emaj_generate_sql('myGroup2', NULL, 'EMAJ_LAST_MARK', '/tmp/emaj_test/sql_scripts/myFile');
 emaj_generate_sql 
-------------------
             11712
(1 row)

select sum(stat_rows)+2 as check from emaj.emaj_detailed_log_stat_group('myGroup2',NULL,'EMAJ_LAST_MARK');
 check 
-------
 11712
(1 row)

-----------------------------
-- emaj_verify_all() test
-----------------------------
-- should be OK
select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

-- detection of unattended tables in E-Maj schemas
begin;
  create table emaj.dummy1_log (col1 int);
  create table emaj.dummy2 (col1 int);
  create table emajb.emaj_dummy (col1 int);
  create table emaj.emaj_dummy (col1 int);               -- this one is not detected
  select * from emaj.emaj_verify_all();
                                       emaj_verify_all                                        
----------------------------------------------------------------------------------------------
 In schema "emaj", the table "emaj"."dummy1_log" is not linked to any created tables group.
 In schema "emaj", the table "emaj"."dummy2" is not linked to any created tables group.
 In schema "emajb", the table "emajb"."emaj_dummy" is not linked to any created tables group.
(3 rows)

rollback;
-- detection of unattended functions in E-Maj schemas
begin;
  create function emaj.dummy1_log_fnct () returns int language sql as $$ select 0 $$;
  create function "emajC".dummy2_rlbk_fnct () returns int language sql as $$ select 0 $$;
  create function "emajC".dummy3_fnct () returns int language sql as $$ select 0 $$;
  create function emaj._dummy4_fnct () returns int language sql as $$ select 0 $$;      -- this one is not detected
  create function emaj.emaj_dummy5_fnct () returns int language sql as $$ select 0 $$;  -- this one is not detected
  select * from emaj.emaj_verify_all();
                                            emaj_verify_all                                            
-------------------------------------------------------------------------------------------------------
 In schema "emaj", the function "emaj"."dummy1_log_fnct" is not linked to any created tables group.
 In schema "emajC", the function "emajC"."dummy2_rlbk_fnct" is not linked to any created tables group.
 In schema "emajC", the function "emajC"."dummy3_fnct" is not linked to any created tables group.
(3 rows)

rollback;
-- detection of unattended sequences in E-Maj schemas
begin;
  create table emaj.dummy1_log (col1 serial);
NOTICE:  CREATE TABLE will create implicit sequence "dummy1_log_col1_seq" for serial column "dummy1_log.col1"
  create sequence emajb.dummy2_seq;
  create sequence emajb.dummy3_log_seq;
  create sequence emaj.emaj_dummy4_seq;                  -- this one is not detected
  select * from emaj.emaj_verify_all();
                                            emaj_verify_all                                             
--------------------------------------------------------------------------------------------------------
 In schema "emaj", the table "emaj"."dummy1_log" is not linked to any created tables group.
 In schema "emaj", the sequence "emaj"."dummy1_log_col1_seq" is not linked to any created tables group.
 In schema "emajb", the sequence "emajb"."dummy2_seq" is not linked to any created tables group.
 In schema "emajb", the sequence "emajb"."dummy3_log_seq" is not linked to any created tables group.
(4 rows)

rollback;
-- detection of unattended types in E-Maj schemas
begin;
  create type emaj.dummy1_type as (col1 int);
  create type emajb.dummy2_type as (col1 int);
  create type emajb.dummy3_type as (col1 int);
  create type emaj.emaj_dummy4_type as (col1 int);       -- this one is not detected
  select * from emaj.emaj_verify_all();
                               emaj_verify_all                                
------------------------------------------------------------------------------
 In schema "emaj", the type "emaj"."dummy1_type" is not an E-Maj component.
 In schema "emajb", the type "emajb"."dummy2_type" is not an E-Maj component.
 In schema "emajb", the type "emajb"."dummy3_type" is not an E-Maj component.
(3 rows)

rollback;
-- detection of unattended views in E-Maj schemas
begin;
  create view emaj.dummy1_view as select hist_id, hist_function, hist_event, hist_object from emaj.emaj_hist;
  create view emaj.dummy2_view as select hist_id, hist_function, hist_event, hist_object from emaj.emaj_hist;
  select * from emaj.emaj_verify_all();
                              emaj_verify_all                               
----------------------------------------------------------------------------
 In schema "emaj", the view "emaj"."dummy1_view" is not an E-Maj component.
 In schema "emaj", the view "emaj"."dummy2_view" is not an E-Maj component.
(2 rows)

rollback;
-- detection of unattended foreign tables in E-Maj schemas
-- (this only gives pertinent results with postgres 9.1+ version)
begin;
  create extension file_fdw;
ERROR:  syntax error at or near "extension"
LINE 1: create extension file_fdw;
               ^
  create foreign data wrapper file handler file_fdw_handler;
ERROR:  syntax error at or near "foreign"
LINE 1: create foreign data wrapper file handler file_fdw_handler;
               ^
  create server file_server foreign data wrapper file;
ERROR:  syntax error at or near "server"
LINE 1: create server file_server foreign data wrapper file;
               ^
  create foreign table emaj.dummy1_ftbl (ligne TEXT) server file_server options(filename '/tmp/emaj_test/log_snaps/_INFO');
ERROR:  syntax error at or near "foreign"
LINE 1: create foreign table emaj.dummy1_ftbl (ligne TEXT) server fi...
               ^
  create foreign table emaj.dummy2_ftbl (ligne TEXT) server file_server options(filename '/tmp/emaj_test/log_snaps/_INFO');
ERROR:  syntax error at or near "foreign"
LINE 1: create foreign table emaj.dummy2_ftbl (ligne TEXT) server fi...
               ^
  select * from emaj.emaj_verify_all();
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- detection of unattended domains in E-Maj schemas
begin;
  create domain "emajC".dummy1_domain as int check (VALUE > 0);
  create domain "emajC".dummy2_domain as int check (VALUE > 0);
  select * from emaj.emaj_verify_all();
                                 emaj_verify_all                                  
----------------------------------------------------------------------------------
 In schema "emajC", the domain "emajC"."dummy1_domain" is not an E-Maj component.
 In schema "emajC", the domain "emajC"."dummy2_domain" is not an E-Maj component.
(2 rows)

rollback;
-- tests on groups errors
-- detection of too old group
begin;
  update emaj.emaj_group set group_pg_version = '8.0.0' where group_name = 'myGroup1';
  select * from emaj.emaj_verify_all();
                                                      emaj_verify_all                                                      
---------------------------------------------------------------------------------------------------------------------------
 The group "myGroup1" has been created with a non compatible postgresql version (8.0.0). It must be dropped and recreated.
(1 row)

rollback;
-- detection of a missing application schema
begin;
  drop schema myschema1 cascade;
NOTICE:  drop cascades to function myschema1.mytbl2trgfct()
NOTICE:  drop cascades to trigger mytbl2trg on table myschema1.mytbl2
NOTICE:  drop cascades to table myschema1.mytbl2b
NOTICE:  drop cascades to default for table myschema1.mytbl2b column col20
NOTICE:  drop cascades to table myschema1.mytbl4
NOTICE:  drop cascades to table myschema1."myTbl3"
NOTICE:  drop cascades to default for table myschema1."myTbl3" column col31
NOTICE:  drop cascades to table myschema1.mytbl2
NOTICE:  drop cascades to table myschema1.mytbl1
  select * from emaj.emaj_verify_all();
                                      emaj_verify_all                                      
-------------------------------------------------------------------------------------------
 The application schema "myschema1" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl1" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl2" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl2b" does not exist any more.
 In group "myGroup1", the table "myschema1"."myTbl3" does not exist any more.
 In group "myGroup1", the sequence "myschema1"."myTbl3_col31_seq" does not exist any more.
 In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more.
(7 rows)

rollback;
-- detection of a missing application relation
begin;
  drop table myschema1.mytbl4;
  select * from emaj.emaj_verify_all();
                               emaj_verify_all                                
------------------------------------------------------------------------------
 In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more.
(1 row)

rollback;
-- detection of relation type change (a table is now a sequence!)
begin;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1';
  select * from emaj.emaj_verify_all();
                                 emaj_verify_all                                 
---------------------------------------------------------------------------------
 In group "myGroup1", the sequence "myschema1"."mytbl1" does not exist any more.
(1 row)

rollback;
-- detection of a missing E-Maj secondary schema
begin;
  drop schema emajb cascade;
NOTICE:  drop cascades to function emajb.myschema1_mytbl2b_rlbk_fnct(bigint)
NOTICE:  drop cascades to function emajb.myschema1_mytbl2b_log_fnct()
NOTICE:  drop cascades to trigger myschema1_mytbl2b_emaj_log_trg on table myschema1.mytbl2b
NOTICE:  drop cascades to sequence emajb.myschema1_mytbl2b_log_seq
NOTICE:  drop cascades to table emajb.myschema1_mytbl2b_log
  select * from emaj.emaj_verify_all();
                                        emaj_verify_all                                         
------------------------------------------------------------------------------------------------
 The E-Maj schema "emajb" does not exist any more.
 In group "myGroup1", the log table "emajb"."myschema1_mytbl2b_log" is not found.
 In group "myGroup1", the log function "emajb"."myschema1_mytbl2b_log_fnct" is not found.
 In group "myGroup1", the rollback function "emajb"."myschema1_mytbl2b_rlbk_fnct" is not found.
 In group "myGroup1", the log trigger "myschema1_mytbl2b_emaj_log_trg" is not found.
(5 rows)

rollback;
-- detection of a missing log trigger
begin;
  drop trigger myschema1_mytbl1_emaj_log_trg on myschema1.mytbl1;
  select * from emaj.emaj_verify_all();
                                  emaj_verify_all                                   
------------------------------------------------------------------------------------
 In group "myGroup1", the log trigger "myschema1_mytbl1_emaj_log_trg" is not found.
(1 row)

rollback;
-- detection of a missing log function (and trigger)
begin;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
NOTICE:  drop cascades to trigger myschema1_mytbl1_emaj_log_trg on table myschema1.mytbl1
  select * from emaj.emaj_verify_all();
                                    emaj_verify_all                                     
----------------------------------------------------------------------------------------
 In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found.
 In group "myGroup1", the log trigger "myschema1_mytbl1_emaj_log_trg" is not found.
(2 rows)

rollback;
-- detection of a missing rollback function
begin;
  drop function emaj.myschema1_mytbl1_rlbk_fnct(bigint);
  select * from emaj.emaj_verify_all();
                                       emaj_verify_all                                        
----------------------------------------------------------------------------------------------
 In group "myGroup1", the rollback function "emaj"."myschema1_mytbl1_rlbk_fnct" is not found.
(1 row)

rollback;
-- detection of a missing truncate trigger
begin;
  drop trigger myschema1_mytbl1_emaj_trunc_trg on myschema1.mytbl1;
ERROR:  trigger "myschema1_mytbl1_emaj_trunc_trg" for table "mytbl1" does not exist
  select * from emaj.emaj_verify_all();
ERROR:  current transaction is aborted, commands ignored until end of transaction block
rollback;
-- detection of a missing log table
begin;
  drop table emaj.myschema1_mytbl1_log;
  select * from emaj.emaj_verify_all();
                                emaj_verify_all                                 
--------------------------------------------------------------------------------
 In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found.
(1 row)

rollback;
-- detection of a change in the application table structure (new column)
begin;
  alter table myschema1.mytbl1 add column newcol int;
  alter table myschema1.mytbl1 add column othernewcol text;
  alter table myschema1.mytbl2 add column newcol int;
  select * from emaj.emaj_verify_all();
                                                                   emaj_verify_all                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------
 In group "myGroup1", the structure of the application table "myschema1"."mytbl1" is not coherent with its log table ("emaj"."myschema1_mytbl1_log").
 In group "myGroup1", the structure of the application table "myschema1"."mytbl2" is not coherent with its log table ("emaj"."myschema1_mytbl2_log").
(2 rows)

rollback;
-- detection of a change in the application table structure (column type change)
begin;
  alter table myschema1.mytbl4 drop column col42;
  alter table myschema1.mytbl4 alter column col45 type varchar(15);
  select * from emaj.emaj_verify_all();
                                                                   emaj_verify_all                                                                    
------------------------------------------------------------------------------------------------------------------------------------------------------
 In group "myGroup1", the structure of the application table "myschema1"."mytbl4" is not coherent with its log table ("emaj"."myschema1_mytbl4_log").
(1 row)

rollback;
-- all in 1
begin;
  create table emaj.dummy_log (col1 int);
  create function emaj.dummy_log_fnct () returns int language sql as $$ select 0 $$;
  create function emaj.dummy_rlbk_fnct () returns int language sql as $$ select 0 $$;
  update emaj.emaj_group set group_pg_version = '8.0.0' where group_name = 'myGroup1';
  drop trigger myschema1_mytbl1_emaj_log_trg on myschema1.mytbl1;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
  drop function emaj.myschema1_mytbl1_rlbk_fnct(bigint);
  drop table emaj.myschema1_mytbl1_log;
  alter table myschema1.mytbl1 add column newcol int;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema2' and rel_tblseq = 'mytbl1';
  select * from emaj.emaj_verify_all();
                                                      emaj_verify_all                                                      
---------------------------------------------------------------------------------------------------------------------------
 In schema "emaj", the table "emaj"."dummy_log" is not linked to any created tables group.
 In schema "emaj", the function "emaj"."dummy_log_fnct" is not linked to any created tables group.
 In schema "emaj", the function "emaj"."dummy_rlbk_fnct" is not linked to any created tables group.
 The group "myGroup1" has been created with a non compatible postgresql version (8.0.0). It must be dropped and recreated.
 In group "myGroup2", the sequence "myschema2"."mytbl1" does not exist any more.
 In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found.
 In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found.
 In group "myGroup1", the rollback function "emaj"."myschema1_mytbl1_rlbk_fnct" is not found.
 In group "myGroup1", the log trigger "myschema1_mytbl1_emaj_log_trg" is not found.
(9 rows)

rollback;
--------------------------------
-- User errors and recovery tests 
--------------------------------
SET client_min_messages TO WARNING;
-- cases when an application table is altered
begin;
  alter table myschema2.mytbl4 add column newcol int;
-- setting a mark or rollbacking fails
  savepoint sp1;
    select emaj.emaj_set_mark_group('myGroup2','dummyMark');
ERROR:  _verify_group: In group "myGroup2", the structure of the application table "myschema2"."mytbl4" is not coherent with its log table ("emaj"."myschema2_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  SQL statement "SELECT  0 FROM emaj._verify_groups(array[ $1 ], true)"
PL/pgSQL function "emaj_set_mark_group" line 25 at PERFORM
  rollback to savepoint sp1;
    select emaj.emaj_rollback_group('myGroup2','EMAJ_LAST_MARK');
ERROR:  _verify_group: In group "myGroup2", the structure of the application table "myschema2"."mytbl4" is not coherent with its log table ("emaj"."myschema2_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  SQL statement "SELECT  0 FROM emaj._verify_groups( $1 , true)"
PL/pgSQL function "_rlbk_groups_step1" line 52 at PERFORM
SQL statement "SELECT emaj._rlbk_groups_step1( $1 ,  $2 ,  $3 , 1,  $4 )"
PL/pgSQL function "_rlbk_groups" line 19 at SQL statement
PL/pgSQL function "emaj_rollback_group" line 7 at RETURN
  rollback to savepoint sp1;
-- but it is possible to stop, drop and recreate the group
  select emaj.emaj_stop_group('myGroup2');
 emaj_stop_group 
-----------------
               8
(1 row)

  savepoint sp2;
    select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

    select emaj.emaj_create_group('myGroup2');
 emaj_create_group 
-------------------
                 8
(1 row)

  rollback to savepoint sp2;
-- or stop and alter the group
  select emaj.emaj_alter_group('myGroup2');
 emaj_alter_group 
------------------
                8
(1 row)

rollback;
-- cases when an application table is dropped
begin;
  drop table myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_group: Table myschema2.mytbl4 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], 'STOP_%', false, false)"
PL/pgSQL function "emaj_stop_group" line 12 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_group: Table myschema2.mytbl4 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

  select emaj.emaj_create_group('myGroup2');
 emaj_create_group 
-------------------
                 7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when a log trigger on an application table is dropped
begin;
  drop trigger myschema2_mytbl4_emaj_log_trg on myschema2.mytbl4;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_group: Trigger myschema2_mytbl4_emaj_log_trg on table myschema2.mytbl4 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], 'STOP_%', false, false)"
PL/pgSQL function "emaj_stop_group" line 12 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'mytbl4';
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_group: Trigger myschema2_mytbl4_emaj_log_trg on table myschema2.mytbl4 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
WARNING:  _check_fk_groups: table myschema2.mytbl2 is referenced by foreign key mytbl4_col43_fkey from table myschema2.mytbl4 that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT  emaj._check_fk_groups(array[ $1 ])"
PL/pgSQL function "emaj_alter_group" line 229 at PERFORM
WARNING:  _check_fk_groups: table myschema2.mytbl1 is referenced by foreign key mytbl4_col44_fkey from table myschema2.mytbl4 that is outside groups (myGroup2).
CONTEXT:  SQL statement "SELECT  emaj._check_fk_groups(array[ $1 ])"
PL/pgSQL function "emaj_alter_group" line 229 at PERFORM
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when an application sequence is dropped
begin;
  drop sequence myschema2.mySeq1;
-- setting a mark or stopping the group fails
-- the only solution is to change the emaj_group_def table, force the group's stop and recreate or alter the group
  delete from emaj.emaj_group_def where grpdef_schema = 'myschema2' and grpdef_tblseq = 'myseq1';
  select emaj.emaj_force_stop_group('myGroup2');
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_alter_group('myGroup2');
 emaj_alter_group 
------------------
                7
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when an application schema is dropped
begin;
  drop schema myschema2 cascade;
-- stopping group fails
  savepoint sp1;
    select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], 'STOP_%', false, false)"
PL/pgSQL function "emaj_stop_group" line 12 at SQL statement
  rollback to savepoint sp1;
-- the only solution is to force the group's stop and drop the group
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
WARNING:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
WARNING:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
WARNING:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
WARNING:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
WARNING:  _stop_group: Schema myschema2 does not exist any more.
CONTEXT:  SQL statement "SELECT emaj._stop_groups(array[ $1 ], NULL, false, true)"
PL/pgSQL function "emaj_force_stop_group" line 14 at SQL statement
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

  select emaj.emaj_drop_group('myGroup2');
 emaj_drop_group 
-----------------
               8
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-- cases when non E-Maj related objects are stored in emaj secondary schemas
begin;
  create sequence emajb.dummySeq;
-- dropping group fails at secondary schema drop step
  savepoint sp1;
    select emaj.emaj_drop_group('myGroup1');
ERROR:  _drop_log_schema: cannot drop schema emajb. It probably owns unattended objects. Use the emaj_verify_all() function to get details
CONTEXT:  SQL statement "SELECT  emaj._drop_log_schema( $1 ,  $2 )"
PL/pgSQL function "_drop_group" line 50 at PERFORM
SQL statement "SELECT emaj._drop_group( $1 , FALSE)"
PL/pgSQL function "emaj_drop_group" line 11 at SQL statement
  rollback to savepoint sp1;
-- use emaj_verify_all() to understand the problem
  select * from emaj.emaj_verify_all();
                                        emaj_verify_all                                        
-----------------------------------------------------------------------------------------------
 In schema "emajb", the sequence "emajb"."dummyseq" is not linked to any created tables group.
(1 row)

-- use emaj_force_drop_group to solve the problem
  select emaj.emaj_force_drop_group('myGroup1');
 emaj_force_drop_group 
-----------------------
                     6
(1 row)

-- and everything is clean...
  select * from emaj.emaj_verify_all();
  emaj_verify_all  
-------------------
 No error detected
(1 row)

rollback;
-----------------------------
-- test end: check, reset history and force sequences id
-----------------------------
select hist_id, hist_function, hist_event, hist_object, regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g'), hist_user from 
  (select * from emaj.emaj_hist order by hist_id) as t;
 hist_id | hist_function  | hist_event | hist_object |                                   regexp_replace                                   | hist_user 
---------+----------------+------------+-------------+------------------------------------------------------------------------------------+-----------
    5003 | STOP_GROUP     | BEGIN      | myGroup1    |                                                                                    | postgres
    5004 | LOCK_GROUP     | BEGIN      | myGroup1    |                                                                                    | postgres
    5005 | LOCK_GROUP     | END        | myGroup1    | 5 tables locked, 0 deadlock(s)                                                     | postgres
    5006 | SET_MARK_GROUP | BEGIN      | myGroup1    | STOP_%                                                                             | postgres
    5007 | SET_MARK_GROUP | END        | myGroup1    | STOP_%                                                                             | postgres
    5008 | STOP_GROUP     | END        | myGroup1    | 6 tables/sequences processed                                                       | postgres
    5009 | RESET_GROUP    | BEGIN      | myGroup1    |                                                                                    | postgres
    5010 | RESET_GROUP    | END        | myGroup1    | 6 tables/sequences processed                                                       | postgres
    5011 | SET_MARK_GROUP | BEGIN      | myGroup2    |                                                                                    | postgres
    5012 | LOCK_GROUP     | BEGIN      | myGroup2    |                                                                                    | postgres
    5013 | LOCK_GROUP     | END        | myGroup2    | 6 tables locked, 0 deadlock(s)                                                     | postgres
    5014 | SET_MARK_GROUP | END        | myGroup2    | Mark22                                                                             | postgres
    5015 | SET_MARK_GROUP | BEGIN      | myGroup2    |                                                                                    | postgres
    5016 | LOCK_GROUP     | BEGIN      | myGroup2    |                                                                                    | postgres
    5017 | LOCK_GROUP     | END        | myGroup2    | 6 tables locked, 0 deadlock(s)                                                     | postgres
    5018 | SET_MARK_GROUP | END        | myGroup2    | Mark23                                                                             | postgres
    5021 | START_GROUP    | BEGIN      | myGroup1    | With log reset                                                                     | postgres
    5022 | LOCK_GROUP     | BEGIN      | myGroup1    |                                                                                    | postgres
    5023 | LOCK_GROUP     | END        | myGroup1    | 5 tables locked, 0 deadlock(s)                                                     | postgres
    5024 | SET_MARK_GROUP | BEGIN      | myGroup1    | Mark11                                                                             | postgres
    5025 | SET_MARK_GROUP | END        | myGroup1    | Mark11                                                                             | postgres
    5026 | START_GROUP    | END        | myGroup1    | 6 tables/sequences processed                                                       | postgres
    5027 | STOP_GROUP     | BEGIN      | myGroup1    |                                                                                    | postgres
    5028 | LOCK_GROUP     | BEGIN      | myGroup1    |                                                                                    | postgres
    5029 | LOCK_GROUP     | END        | myGroup1    | 5 tables locked, 0 deadlock(s)                                                     | postgres
    5030 | SET_MARK_GROUP | BEGIN      | myGroup1    | STOP_%                                                                             | postgres
    5031 | SET_MARK_GROUP | END        | myGroup1    | STOP_%                                                                             | postgres
    5032 | STOP_GROUP     | END        | myGroup1    | 6 tables/sequences processed                                                       | postgres
    5040 | SNAP_GROUP     | BEGIN      | myGroup1    | /tmp/emaj_test/snaps                                                               | postgres
    5041 | SNAP_GROUP     | END        | myGroup1    | 6 tables/sequences processed                                                       | postgres
    5042 | SNAP_GROUP     | BEGIN      | myGroup1    | /tmp/emaj_test/snaps                                                               | postgres
    5043 | SNAP_GROUP     | END        | myGroup1    | 6 tables/sequences processed                                                       | postgres
    5055 | SNAP_LOG_GROUP | BEGIN      | myGroup2    | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/log_snaps          | postgres
    5056 | SNAP_LOG_GROUP | END        | myGroup2    | 8 tables/sequences processed                                                       | postgres
    5057 | SNAP_LOG_GROUP | BEGIN      | myGroup2    | From initial mark to current situation towards /tmp/emaj_test/log_snaps            | postgres
    5058 | SNAP_LOG_GROUP | END        | myGroup2    | 8 tables/sequences processed                                                       | postgres
    5059 | SNAP_LOG_GROUP | BEGIN      | myGroup2    | From mark Mark21 to current situation towards /tmp/emaj_test/log_snaps             | postgres
    5060 | SNAP_LOG_GROUP | END        | myGroup2    | 8 tables/sequences processed                                                       | postgres
    5061 | SNAP_LOG_GROUP | BEGIN      | myGroup2    | From mark Mark21 to mark Mark21 towards /tmp/emaj_test/log_snaps                   | postgres
    5062 | SNAP_LOG_GROUP | END        | myGroup2    | 8 tables/sequences processed                                                       | postgres
    5063 | SNAP_LOG_GROUP | BEGIN      | myGroup2    | From mark Mark21 to mark Mark23 towards /tmp/emaj_test/log_snaps                   | postgres
    5064 | SNAP_LOG_GROUP | END        | myGroup2    | 8 tables/sequences processed                                                       | postgres
    5073 | GENERATE_SQL   | BEGIN      | myGroup2    | From initial mark to current situation towards /tmp/emaj_test/sql_scripts/myFile   | postgres
    5074 | GENERATE_SQL   | END        | myGroup2    | 11712 generated statements                                                         | postgres
    5075 | GENERATE_SQL   | BEGIN      | myGroup2    | From mark Mark21 to current situation towards /tmp/emaj_test/sql_scripts/myFile    | postgres
    5076 | GENERATE_SQL   | END        | myGroup2    | 11712 generated statements                                                         | postgres
    5077 | GENERATE_SQL   | BEGIN      | myGroup2    | From initial mark to mark Mark22 towards /tmp/emaj_test/sql_scripts/myFile         | postgres
    5078 | GENERATE_SQL   | END        | myGroup2    | 11602 generated statements                                                         | postgres
    5079 | GENERATE_SQL   | BEGIN      | myGroup2    | From initial mark to mark EMAJ_LAST_MARK towards /tmp/emaj_test/sql_scripts/myFile | postgres
    5080 | GENERATE_SQL   | END        | myGroup2    | 11712 generated statements                                                         | postgres
(50 rows)

truncate emaj.emaj_hist;
alter sequence emaj.emaj_hist_hist_id_seq restart 6000;
alter sequence emaj.emaj_mark_mark_id_seq restart 600;
alter sequence emaj.emaj_sequence_sequ_id_seq restart 6000;
alter sequence emaj.emaj_seq_hole_sqhl_id_seq restart 600;
