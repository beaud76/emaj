-- start_stop.sql : test emaj_start_group(), emaj_start_groups(), 
--                      emaj_stop_group(), emaj_stop_groups(), emaj_force_stop_group(),
--                      emaj_protect_group() and emaj_unprotect_group() functions
--
SET client_min_messages TO WARNING;
-- prepare groups
select emaj.emaj_create_group('myGroup1');
WARNING:  _create_tbl: table "myschema1.mytbl2" has triggers (mytbl2trg). Verify the compatibility with emaj rollback operations (in particular if triggers update one or several other tables). Triggers may have to be manualy disabled before rollback.
 emaj_create_group 
-------------------
                 6
(1 row)

select emaj.emaj_create_group('myGroup2');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
 emaj_create_group 
-------------------
                 8
(1 row)

INSERT INTO emaj.emaj_param (param_key, param_value_interval) VALUES ('history_retention','1 second'::interval);
select pg_sleep(1);
 pg_sleep 
----------
 
(1 row)

-----------------------------
-- emaj_start_group() tests
-----------------------------
-- group is unknown in emaj_group
select emaj.emaj_start_group(NULL,NULL);
ERROR:  _start_groups: group "<NULL>" has not been created.
CONTEXT:  PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
select emaj.emaj_start_group('unknownGroup',NULL,NULL);
ERROR:  _start_groups: group "unknownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
-- reserved mark name
select emaj.emaj_start_group('myGroup1','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text,text[]) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_mark, v_groupNames)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 45 at SQL statement
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
-- detection of a missing application schema
begin;
  drop schema myschema1 cascade;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (1): In group "myGroup1", the table "myschema1"."mytbl1" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 34 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a missing application relation
begin;
  drop table myschema1.mytbl4;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (1): In group "myGroup1", the table "myschema1"."mytbl4" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 34 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of relation type change (a table is now a sequence!)
begin;
  update emaj.emaj_relation set rel_kind = 'S' where rel_schema = 'myschema1' and rel_tblseq = 'mytbl1';
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (1): In group "myGroup1", the sequence "myschema1"."mytbl1" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 34 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a missing E-Maj secondary schema
begin;
  drop schema emajb cascade;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (2): In group "myGroup1", the log table "emajb"."myschema1_mytbl2b_log" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 51 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a missing log trigger
begin;
  drop trigger emaj_log_trg on myschema1.mytbl1;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (4): In group "myGroup1", the log trigger "emaj_log_trg" on table "myschema1"."mytbl1" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 84 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a missing log function
begin;
  drop function emaj.myschema1_mytbl1_log_fnct() cascade;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (3): In group "myGroup1", the log function "emaj"."myschema1_mytbl1_log_fnct" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 67 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a missing truncate trigger
begin;
  drop trigger emaj_trunc_trg on myschema1.mytbl1;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (5): In group "myGroup1", the truncate trigger "emaj_trunc_trg" on table "myschema1"."mytbl1" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 100 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a missing log table
begin;
  drop table emaj.myschema1_mytbl1_log;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (2): In group "myGroup1", the log table "emaj"."myschema1_mytbl1_log" is not found. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 51 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a change in the application table structure (new column)
begin;
  alter table myschema1.mytbl1 add column newcol int;
  alter table myschema1.mytbl1 add column othernewcol text;
  alter table myschema1.mytbl2 add column newcol int;
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (6): In group "myGroup1", the structure of the application table "myschema1"."mytbl1" is not coherent with its log table ("emaj"."myschema1_mytbl1_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 141 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- detection of a change in the application table structure (column type change)
begin;
  alter table myschema1.mytbl4 drop column col42;
  alter table myschema1.mytbl4 alter column col45 type varchar(15);
  select emaj.emaj_start_group('myGroup1','M1');
ERROR:  _verify_groups (6): In group "myGroup1", the structure of the application table "myschema1"."mytbl4" is not coherent with its log table ("emaj"."myschema1_mytbl4_log"). You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 141 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
rollback;
-- should be OK
select emaj.emaj_start_group('myGroup1','Mark1');
 emaj_start_group 
------------------
                6
(1 row)

select emaj.emaj_start_group('myGroup2','Mark2',true);
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

select emaj.emaj_start_group('phil''s group#3",','Mark3',false);
 emaj_start_group 
------------------
                4
(1 row)

select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

select emaj.emaj_stop_group('myGroup2');
 emaj_stop_group 
-----------------
               8
(1 row)

-- should be OK, with a warning on fkey between tables from different groups
begin;
  alter table myschema2.myTbl4 drop constraint mytbl4_col44_fkey;
  alter table myschema2.myTbl4 add constraint mytbl4_col44_fkey 
    FOREIGN KEY (col44,col45) REFERENCES myschema1.myTbl1 (col11,col12) ON DELETE CASCADE ON UPDATE SET NULL;
  select emaj.emaj_start_group('myGroup2','Mark2');
WARNING:  _check_fk_groups: Foreign key "mytbl4_col44_fkey", from table "myschema2.mytbl4", references "myschema1.mytbl1" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

rollback;
-- start with generated mark name
select emaj.emaj_start_group('myGroup1','%abc%',true);
 emaj_start_group 
------------------
                6
(1 row)

select emaj.emaj_start_group('myGroup2','',false);
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

-- group already started
select emaj.emaj_start_group('myGroup2','Mark3');
ERROR:  _start_groups: The group "myGroup2" cannot be started because it is in LOGGING state. An emaj_stop_group function must be previously executed.
CONTEXT:  PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 30 at RAISE
SQL statement "SELECT emaj._start_groups(array[v_groupName], v_mark, false, v_resetLog)"
PL/pgSQL function emaj.emaj_start_group(text,text,boolean) line 17 at SQL statement
-- check how truncate reacts  - tables are empty anyway
-- ... for a rollbackable group (must be blocked)
SET client_min_messages TO NOTICE;
truncate myschema1.mytbl1 cascade;
NOTICE:  truncate cascades to table "mytbl4"
ERROR:  emaj._forbid_truncate_fnct: TRUNCATE is not allowed while updates on this table (myschema1.mytbl1) are currently protected by E-Maj. Consider stopping the group before issuing a TRUNCATE.
CONTEXT:  PL/pgSQL function emaj._forbid_truncate_fnct() line 7 at RAISE
-- ... for an audit_only group (must be logged)
truncate "phil's schema3"."phil's tbl1" cascade;
NOTICE:  truncate cascades to table "mytbl4"
NOTICE:  truncate cascades to table "myTbl2\"
select "phil's col11", "phil's col12", "phil\s col13", 
       emaj_verb, emaj_tuple, emaj_gid, emaj_user, emaj_user_ip, emaj_user_port 
  from "emaj #'3"."phil's schema3_phil's tbl1_log";
 phil's col11 | phil's col12 | phil\s col13 | emaj_verb | emaj_tuple | emaj_gid | emaj_user | emaj_user_ip | emaj_user_port 
--------------+--------------+--------------+-----------+------------+----------+-----------+--------------+----------------
              |              |              | TRU       |            |        1 | postgres  |              |               
(1 row)

SET client_min_messages TO WARNING;
-- impact of started group
select group_name, group_is_logging, group_is_rlbk_protected, group_nb_table, group_nb_sequence, group_is_rollbackable, 
       group_creation_time_id, group_last_alter_time_id, group_comment
  from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected | group_nb_table | group_nb_sequence | group_is_rollbackable | group_creation_time_id | group_last_alter_time_id | group_comment 
------------------+------------------+-------------------------+----------------+-------------------+-----------------------+------------------------+--------------------------+---------------
 myGroup1         | t                | f                       |              5 |                 1 | t                     |                    200 |                          | 
 myGroup2         | t                | f                       |              6 |                 2 | t                     |                    201 |                          | 
 myGroup4         | f                | f                       |              3 |                 0 | t                     |                     15 |                          | 
 phil's group#3", | t                | t                       |              2 |                 2 | f                     |                     14 |                          | 
(4 rows)

select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     201 | myGroup2         | Mark2          |          203 | t               | f                      |              |                         0 | 
     202 | phil's group#3", | Mark3          |          204 | f               | f                      |              |                           | 
     204 | myGroup2         | STOP_%         |          206 | t               | f                      |              |                         0 | 
     206 | myGroup1         | %abc%          |          208 | f               | f                      |              |                           | 
     207 | myGroup2         | START_%        |          209 | f               | f                      |              |                           | 
(5 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 200 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
     200 |                  0 | C
     201 |                  0 | C
     202 |                  0 | M
     203 |                  0 | M
     204 |                  0 | M
     205 |                  0 | M
     206 |                  0 | M
     208 |                  0 | M
     209 |                  0 | M
(9 rows)

-- check old events are deleted
select hist_function, hist_event, hist_object, 
  case when hist_function = 'PURGE_HISTORY' then regexp_replace(hist_wording,'14(4|6)','<144|146>')
    else regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g') end,
  hist_user from emaj.emaj_hist order by hist_id;
 hist_function  | hist_event |   hist_object    |          regexp_replace          | hist_user 
----------------+------------+------------------+----------------------------------+-----------
 START_GROUP    | BEGIN      | myGroup1         | With log reset                   | postgres
 PURGE_HISTORY  |            |                  | <144|146> emaj_hist rows deleted | postgres
 LOCK_GROUP     | BEGIN      | myGroup1         |                                  | postgres
 LOCK_GROUP     | END        | myGroup1         | 5 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | myGroup1         | Mark1                            | postgres
 SET_MARK_GROUP | END        | myGroup1         | Mark1                            | postgres
 START_GROUP    | END        | myGroup1         | 6 tables/sequences processed     | postgres
 START_GROUP    | BEGIN      | myGroup2         | With log reset                   | postgres
 LOCK_GROUP     | BEGIN      | myGroup2         |                                  | postgres
 LOCK_GROUP     | END        | myGroup2         | 6 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | myGroup2         | Mark2                            | postgres
 SET_MARK_GROUP | END        | myGroup2         | Mark2                            | postgres
 START_GROUP    | END        | myGroup2         | 8 tables/sequences processed     | postgres
 START_GROUP    | BEGIN      | phil's group#3", | Without log reset                | postgres
 LOCK_GROUP     | BEGIN      | phil's group#3", |                                  | postgres
 LOCK_GROUP     | END        | phil's group#3", | 2 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | phil's group#3", | Mark3                            | postgres
 SET_MARK_GROUP | END        | phil's group#3", | Mark3                            | postgres
 START_GROUP    | END        | phil's group#3", | 4 tables/sequences processed     | postgres
 STOP_GROUP     | BEGIN      | myGroup1         |                                  | postgres
 LOCK_GROUP     | BEGIN      | myGroup1         |                                  | postgres
 LOCK_GROUP     | END        | myGroup1         | 5 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | myGroup1         | STOP_%                           | postgres
 SET_MARK_GROUP | END        | myGroup1         | STOP_%                           | postgres
 STOP_GROUP     | END        | myGroup1         | 6 tables/sequences processed     | postgres
 STOP_GROUP     | BEGIN      | myGroup2         |                                  | postgres
 LOCK_GROUP     | BEGIN      | myGroup2         |                                  | postgres
 LOCK_GROUP     | END        | myGroup2         | 6 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | myGroup2         | STOP_%                           | postgres
 SET_MARK_GROUP | END        | myGroup2         | STOP_%                           | postgres
 STOP_GROUP     | END        | myGroup2         | 8 tables/sequences processed     | postgres
 START_GROUP    | BEGIN      | myGroup1         | With log reset                   | postgres
 LOCK_GROUP     | BEGIN      | myGroup1         |                                  | postgres
 LOCK_GROUP     | END        | myGroup1         | 5 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | myGroup1         | %abc%                            | postgres
 SET_MARK_GROUP | END        | myGroup1         | %abc%                            | postgres
 START_GROUP    | END        | myGroup1         | 6 tables/sequences processed     | postgres
 START_GROUP    | BEGIN      | myGroup2         | Without log reset                | postgres
 LOCK_GROUP     | BEGIN      | myGroup2         |                                  | postgres
 LOCK_GROUP     | END        | myGroup2         | 6 tables locked, 0 deadlock(s)   | postgres
 SET_MARK_GROUP | BEGIN      | myGroup2         | START_%                          | postgres
 SET_MARK_GROUP | END        | myGroup2         | START_%                          | postgres
 START_GROUP    | END        | myGroup2         | 8 tables/sequences processed     | postgres
(43 rows)

delete from emaj.emaj_param where param_key = 'history_retention';
-----------------------------
-- emaj_stop_group() tests
-----------------------------
-- unknown group
select emaj.emaj_stop_group(NULL);
ERROR:  _stop_groups: group "<NULL>" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
select emaj.emaj_stop_group('unkownGroup');
ERROR:  _stop_groups: group "unkownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
select emaj.emaj_stop_group(NULL,NULL);
ERROR:  _stop_groups: group "<NULL>" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
select emaj.emaj_stop_group('unkownGroup',NULL);
ERROR:  _stop_groups: group "unkownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
-- invalid mark
select emaj.emaj_stop_group('myGroup1','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text,text[]) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_mark, v_groupNames)"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 41 at SQL statement
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
-- already existing mark
select emaj.emaj_stop_group('phil''s group#3",','Mark3');
ERROR:  _check_new_mark: Group "phil's group#3"," already contains a mark named "Mark3".
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text,text[]) line 30 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_mark, v_groupNames)"
PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 41 at SQL statement
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_stop_group('myGroup2');
ERROR:  _stop_groups: Table "myschema2.myTbl3" does not exist any more.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 81 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], v_mark, false, false)"
PL/pgSQL function emaj.emaj_stop_group(text,text) line 16 at SQL statement
rollback;
-- should be OK
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

-- impact of stopped group
select group_name, group_is_logging, group_is_rlbk_protected, group_nb_table, group_nb_sequence, group_is_rollbackable, 
       group_creation_time_id, group_last_alter_time_id, group_comment
  from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected | group_nb_table | group_nb_sequence | group_is_rollbackable | group_creation_time_id | group_last_alter_time_id | group_comment 
------------------+------------------+-------------------------+----------------+-------------------+-----------------------+------------------------+--------------------------+---------------
 myGroup1         | f                | f                       |              5 |                 1 | t                     |                    200 |                          | 
 myGroup2         | t                | f                       |              6 |                 2 | t                     |                    201 |                          | 
 myGroup4         | f                | f                       |              3 |                 0 | t                     |                     15 |                          | 
 phil's group#3", | t                | t                       |              2 |                 2 | f                     |                     14 |                          | 
(4 rows)

select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     201 | myGroup2         | Mark2          |          203 | t               | f                      |              |                         0 | 
     202 | phil's group#3", | Mark3          |          204 | f               | f                      |              |                           | 
     204 | myGroup2         | STOP_%         |          206 | t               | f                      |              |                         0 | 
     206 | myGroup1         | %abc%          |          208 | t               | f                      |              |                         0 | 
     207 | myGroup2         | START_%        |          209 | f               | f                      |              |                           | 
     208 | myGroup1         | STOP_%         |          210 | t               | f                      |              |                         0 | 
(6 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 200 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
     200 |                  0 | C
     201 |                  0 | C
     202 |                  0 | M
     203 |                  0 | M
     204 |                  0 | M
     205 |                  0 | M
     206 |                  0 | M
     208 |                  0 | M
     209 |                  0 | M
     210 |                  2 | M
(10 rows)

-- should be OK
select emaj.emaj_stop_group('myGroup2','Stop mark');
 emaj_stop_group 
-----------------
               8
(1 row)

-- warning, already stopped
select emaj.emaj_stop_group('myGroup2');
WARNING:  _stop_groups: Group "myGroup2" cannot be stopped because it is not in LOGGING state.
 emaj_stop_group 
-----------------
               0
(1 row)

select emaj.emaj_stop_group('myGroup2','Stop mark 2');
WARNING:  _stop_groups: Group "myGroup2" cannot be stopped because it is not in LOGGING state.
 emaj_stop_group 
-----------------
               0
(1 row)

-- start with auto-mark in a single transaction
begin transaction;
  select emaj.emaj_start_group('myGroup1');
 emaj_start_group 
------------------
                6
(1 row)

  select emaj.emaj_start_group('myGroup2','');
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

commit;
select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     202 | phil's group#3", | Mark3          |          204 | f               | f                      |              |                           | 
     210 | myGroup1         | START_%        |          212 | f               | f                      |              |                           | 
     211 | myGroup2         | START_%        |          213 | f               | f                      |              |                           | 
(3 rows)

begin transaction;
  select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

  select emaj.emaj_stop_group('myGroup2','');
 emaj_stop_group 
-----------------
               8
(1 row)

commit;
-- use of % in start mark name
select emaj.emaj_start_group('myGroup1','Foo%Bar');
 emaj_start_group 
------------------
                6
(1 row)

select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     202 | phil's group#3", | Mark3          |          204 | f               | f                      |              |                           | 
     211 | myGroup2         | START_%        |          213 | t               | f                      |              |                         0 | 
     213 | myGroup2         | STOP_%         |          215 | t               | f                      |              |                         0 | 
     214 | myGroup1         | Foo%Bar        |          216 | f               | f                      |              |                           | 
(4 rows)

-----------------------------
-- emaj_start_groups() tests
-----------------------------
select emaj.emaj_stop_group('myGroup1',NULL);
 emaj_stop_group 
-----------------
               6
(1 row)

-- NULL group names array
select emaj.emaj_start_groups(NULL,NULL,NULL);
WARNING:  _check_names_array: No group name to process.
 emaj_start_groups 
-------------------
                 0
(1 row)

-- at least one group is unknown in emaj_group_def
select emaj.emaj_start_groups('{""}',NULL);
WARNING:  _check_names_array: a group name is NULL or empty.
WARNING:  _check_names_array: No group name to process.
 emaj_start_groups 
-------------------
                 0
(1 row)

select emaj.emaj_start_groups('{"unknownGroup",""}',NULL,true);
WARNING:  _check_names_array: a group name is NULL or empty.
ERROR:  _start_groups: group "unknownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._start_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, v_resetLog)"
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 16 at SQL statement
select emaj.emaj_start_groups('{"myGroup1","unknownGroup"}',NULL,false);
ERROR:  _start_groups: group "unknownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._start_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, v_resetLog)"
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 16 at SQL statement
-- reserved mark name
select emaj.emaj_start_groups('{"myGroup1"}','EMAJ_LAST_MARK');
ERROR:  _check_new_mark: "EMAJ_LAST_MARK" is not an allowed name for a new mark.
CONTEXT:  PL/pgSQL function emaj._check_new_mark(text,text[]) line 14 at RAISE
SQL statement "SELECT emaj._check_new_mark(v_mark, v_groupNames)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 45 at SQL statement
SQL statement "SELECT emaj._start_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, v_resetLog)"
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 16 at SQL statement
-- second group is already started
select emaj.emaj_start_group('myGroup2','Mark1',true);
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup2).
 emaj_start_group 
------------------
                8
(1 row)

select emaj.emaj_start_groups('{"myGroup1","myGroup2"}','Mark1',false);
ERROR:  _start_groups: The group "myGroup2" cannot be started because it is in LOGGING state. An emaj_stop_group function must be previously executed.
CONTEXT:  PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 30 at RAISE
SQL statement "SELECT emaj._start_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, v_resetLog)"
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 16 at SQL statement
select emaj.emaj_stop_group('myGroup2');
 emaj_stop_group 
-----------------
               8
(1 row)

-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Mark1',true);
ERROR:  _verify_groups (1): In group "myGroup2", the table "myschema2"."myTbl3" does not exist any more. You may use "SELECT * FROM emaj.emaj_verify_all()" to look for other issues.
CONTEXT:  PL/pgSQL function emaj._verify_groups(text[],boolean) line 34 at RAISE
SQL statement "SELECT 0 FROM emaj._verify_groups(v_groupNames, true)"
PL/pgSQL function emaj._start_groups(text[],text,boolean,boolean) line 34 at PERFORM
SQL statement "SELECT emaj._start_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, v_resetLog)"
PL/pgSQL function emaj.emaj_start_groups(text[],text,boolean) line 16 at SQL statement
rollback;
-- should be OK, with a warning on fkey between tables from different groups and warning on group names array content
begin;
  alter table myschema2.myTbl4 drop constraint mytbl4_col44_fkey;
  alter table myschema2.myTbl4 add constraint mytbl4_col44_fkey 
    FOREIGN KEY (col44,col45) REFERENCES myschema1.myTbl1 (col11,col12) ON DELETE CASCADE ON UPDATE SET NULL;
  select emaj.emaj_start_groups(array['myGroup1',NULL,'myGroup2','','myGroup2','myGroup2','myGroup1'],'Mark1');
WARNING:  _check_names_array: a group name is NULL or empty.
WARNING:  _check_names_array: a group name is NULL or empty.
WARNING:  _check_names_array: duplicate group name "myGroup2".
WARNING:  _check_names_array: duplicate group name "myGroup2".
WARNING:  _check_names_array: duplicate group name "myGroup1".
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                14
(1 row)

rollback;
-- impact of started group
select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Mark1',true);
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                14
(1 row)

select group_name, group_is_logging, group_is_rlbk_protected, group_nb_table, group_nb_sequence, group_is_rollbackable, 
       group_creation_time_id, group_last_alter_time_id, group_comment
  from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected | group_nb_table | group_nb_sequence | group_is_rollbackable | group_creation_time_id | group_last_alter_time_id | group_comment 
------------------+------------------+-------------------------+----------------+-------------------+-----------------------+------------------------+--------------------------+---------------
 myGroup1         | t                | f                       |              5 |                 1 | t                     |                    200 |                          | 
 myGroup2         | t                | f                       |              6 |                 2 | t                     |                    201 |                          | 
 myGroup4         | f                | f                       |              3 |                 0 | t                     |                     15 |                          | 
 phil's group#3", | t                | t                       |              2 |                 2 | f                     |                     14 |                          | 
(4 rows)

select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     202 | phil's group#3", | Mark3          |          204 | f               | f                      |              |                           | 
     220 | myGroup1         | Mark1          |          221 | f               | f                      |              |                           | 
     221 | myGroup2         | Mark1          |          221 | f               | f                      |              |                           | 
(3 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 200 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
     200 |                  0 | C
     201 |                  0 | C
     202 |                  0 | M
     203 |                  0 | M
     204 |                  0 | M
     205 |                  0 | M
     206 |                  0 | M
     208 |                  0 | M
     209 |                  0 | M
     210 |                  2 | M
     211 |                  2 | M
     212 |                  2 | M
     213 |                  2 | M
     214 |                  2 | M
     215 |                  2 | M
     216 |                  2 | M
     217 |                  2 | M
     218 |                  2 | M
     219 |                  2 | M
     221 |                  2 | M
(20 rows)

-----------------------------
-- emaj_stop_groups() tests
-----------------------------
-- NULL group names array
select emaj.emaj_stop_groups(NULL);
WARNING:  _check_names_array: No group name to process.
 emaj_stop_groups 
------------------
                0
(1 row)

-- at least one group is unknown in emaj_group_def
select emaj.emaj_stop_groups('{""}');
WARNING:  _check_names_array: a group name is NULL or empty.
WARNING:  _check_names_array: No group name to process.
 emaj_stop_groups 
------------------
                0
(1 row)

select emaj.emaj_stop_groups('{"unknownGroup",""}');
WARNING:  _check_names_array: a group name is NULL or empty.
ERROR:  _stop_groups: group "unknownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, false)"
PL/pgSQL function emaj.emaj_stop_groups(text[],text) line 13 at SQL statement
select emaj.emaj_stop_groups('{"myGroup1","unknownGroup"}');
ERROR:  _stop_groups: group "unknownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, false)"
PL/pgSQL function emaj.emaj_stop_groups(text[],text) line 13 at SQL statement
-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_stop_groups(array['myGroup1','myGroup2']);
ERROR:  _stop_groups: Table "myschema2.myTbl3" does not exist any more.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 81 at RAISE
SQL statement "SELECT emaj._stop_groups(emaj._check_names_array(v_groupNames,'group'), v_mark, true, false)"
PL/pgSQL function emaj.emaj_stop_groups(text[],text) line 13 at SQL statement
rollback;
-- should be OK
select emaj.emaj_stop_groups(array['myGroup1','myGroup2'],'Global Stop at %');
 emaj_stop_groups 
------------------
               14
(1 row)

select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    |  regexp_replace  | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+------------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     202 | phil's group#3", | Mark3            |          204 | f               | f                      |              |                           | 
     220 | myGroup1         | Mark1            |          221 | t               | f                      |              |                         0 | 
     221 | myGroup2         | Mark1            |          221 | t               | f                      |              |                         0 | 
     222 | myGroup1         | Global Stop at % |          222 | t               | f                      |              |                         0 | 
     223 | myGroup2         | Global Stop at % |          222 | t               | f                      |              |                         0 | 
(5 rows)

-- with warning about group names array content
select emaj.emaj_stop_groups(array['myGroup1',NULL,'myGroup2','','myGroup2','myGroup2','myGroup1']);
WARNING:  _check_names_array: a group name is NULL or empty.
WARNING:  _check_names_array: a group name is NULL or empty.
WARNING:  _check_names_array: duplicate group name "myGroup2".
WARNING:  _check_names_array: duplicate group name "myGroup2".
WARNING:  _check_names_array: duplicate group name "myGroup1".
WARNING:  _stop_groups: Group "myGroup1" cannot be stopped because it is not in LOGGING state.
WARNING:  _stop_groups: Group "myGroup2" cannot be stopped because it is not in LOGGING state.
 emaj_stop_groups 
------------------
                0
(1 row)

-----------------------------
-- emaj_force_stop_group() tests
-----------------------------
select emaj.emaj_start_groups(array['myGroup1','myGroup2'],'Mark1',true);
WARNING:  _check_fk_groups: Foreign key "mytbl6_col61_fkey", from table "myschema2.mytbl6", references "myschema2.mytbl7" that is outside groups (myGroup1,myGroup2).
WARNING:  _check_fk_groups: table "myschema2.mytbl6" is referenced by foreign key "mytbl8_col81_fkey" from table "myschema2.mytbl8" that is outside groups (myGroup1,myGroup2).
 emaj_start_groups 
-------------------
                14
(1 row)

-- unknown group
select emaj.emaj_force_stop_group(NULL);
ERROR:  _stop_groups: group "<NULL>" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
select emaj.emaj_force_stop_group('unkownGroup');
ERROR:  _stop_groups: group "unkownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj._stop_groups(text[],text,boolean,boolean) line 26 at RAISE
SQL statement "SELECT emaj._stop_groups(array[v_groupName], NULL, false, true)"
PL/pgSQL function emaj.emaj_force_stop_group(text) line 15 at SQL statement
-- should be OK
-- missing application schema
begin;
  drop schema mySchema2 cascade;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Schema "myschema2" does not exist any more.
WARNING:  _stop_groups: Table "myschema2.mytbl1" does not exist any more.
WARNING:  _stop_groups: Table "myschema2.mytbl2" does not exist any more.
WARNING:  _stop_groups: Table "myschema2.myTbl3" does not exist any more.
WARNING:  _stop_groups: Table "myschema2.mytbl4" does not exist any more.
WARNING:  _stop_groups: Table "myschema2.mytbl5" does not exist any more.
WARNING:  _stop_groups: Table "myschema2.mytbl6" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- missing application table
begin;
  drop table mySchema2."myTbl3" cascade;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Table "myschema2.myTbl3" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- missing log trigger
begin;
  drop trigger emaj_log_trg on myschema2.mytbl4;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Log trigger "emaj_log_trg" on table "myschema2.mytbl4" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- missing truncate trigger
begin;
  drop trigger emaj_trunc_trg on myschema2.mytbl4;
  select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Truncate trigger "emaj_trunc_trg" on table "myschema2.mytbl4" does not exist any more.
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

rollback;
-- sane group
select emaj.emaj_force_stop_group('myGroup2');
 emaj_force_stop_group 
-----------------------
                     8
(1 row)

select emaj.emaj_force_stop_group('myGroup1');
 emaj_force_stop_group 
-----------------------
                     6
(1 row)

-- warning, already stopped
select emaj.emaj_force_stop_group('myGroup2');
WARNING:  _stop_groups: Group "myGroup2" cannot be stopped because it is not in LOGGING state.
 emaj_force_stop_group 
-----------------------
                     0
(1 row)

-- impact of stopped group
select group_name, group_is_logging, group_is_rlbk_protected, group_nb_table, group_nb_sequence, group_is_rollbackable, 
       group_creation_time_id, group_last_alter_time_id, group_comment
  from emaj.emaj_group order by group_name;
    group_name    | group_is_logging | group_is_rlbk_protected | group_nb_table | group_nb_sequence | group_is_rollbackable | group_creation_time_id | group_last_alter_time_id | group_comment 
------------------+------------------+-------------------------+----------------+-------------------+-----------------------+------------------------+--------------------------+---------------
 myGroup1         | f                | f                       |              5 |                 1 | t                     |                    200 |                          | 
 myGroup2         | f                | f                       |              6 |                 2 | t                     |                    201 |                          | 
 myGroup4         | f                | f                       |              3 |                 0 | t                     |                     15 |                          | 
 phil's group#3", | t                | t                       |              2 |                 2 | f                     |                     14 |                          | 
(4 rows)

select mark_id, mark_group, regexp_replace(mark_name,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'), mark_time_id, mark_is_deleted, mark_is_rlbk_protected, mark_comment, mark_log_rows_before_next, mark_logged_rlbk_target_mark from emaj.emaj_mark order by mark_id;
 mark_id |    mark_group    | regexp_replace | mark_time_id | mark_is_deleted | mark_is_rlbk_protected | mark_comment | mark_log_rows_before_next | mark_logged_rlbk_target_mark 
---------+------------------+----------------+--------------+-----------------+------------------------+--------------+---------------------------+------------------------------
     202 | phil's group#3", | Mark3          |          204 | f               | f                      |              |                           | 
     224 | myGroup1         | Mark1          |          223 | t               | f                      |              |                           | 
     225 | myGroup2         | Mark1          |          223 | t               | f                      |              |                           | 
(3 rows)

select time_id, time_last_emaj_gid, time_event from emaj.emaj_time_stamp where time_id >= 200 order by time_id;
 time_id | time_last_emaj_gid | time_event 
---------+--------------------+------------
     200 |                  0 | C
     201 |                  0 | C
     202 |                  0 | M
     203 |                  0 | M
     204 |                  0 | M
     205 |                  0 | M
     206 |                  0 | M
     208 |                  0 | M
     209 |                  0 | M
     210 |                  2 | M
     211 |                  2 | M
     212 |                  2 | M
     213 |                  2 | M
     214 |                  2 | M
     215 |                  2 | M
     216 |                  2 | M
     217 |                  2 | M
     218 |                  2 | M
     219 |                  2 | M
     221 |                  2 | M
     222 |                  2 | M
     223 |                  2 | M
(22 rows)

-----------------------------
-- emaj_protect_group() tests
-----------------------------
-- group is unknown
select emaj.emaj_protect_group(NULL);
ERROR:  emaj_protect_group: group <NULL> has not been created.
CONTEXT:  PL/pgSQL function emaj.emaj_protect_group(text) line 16 at RAISE
select emaj.emaj_protect_group('unknownGroup');
ERROR:  emaj_protect_group: group unknownGroup has not been created.
CONTEXT:  PL/pgSQL function emaj.emaj_protect_group(text) line 16 at RAISE
-- group is not rollbackable
select emaj.emaj_protect_group('phil''s group#3",');
ERROR:  emaj_protect_group: The group "phil's group#3"," cannot be protected because it is an AUDIT_ONLY group.
CONTEXT:  PL/pgSQL function emaj.emaj_protect_group(text) line 20 at RAISE
-- group is not in logging state
select emaj.emaj_protect_group('myGroup1');
ERROR:  emaj_protect_group: The group "myGroup1" cannot be protected because it is not in LOGGING state.
CONTEXT:  PL/pgSQL function emaj.emaj_protect_group(text) line 24 at RAISE
-- should be ok
select emaj.emaj_start_group('myGroup1','M1');
 emaj_start_group 
------------------
                6
(1 row)

select emaj.emaj_protect_group('myGroup1');
 emaj_protect_group 
--------------------
                  1
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | t
(1 row)

-- protect an already protected group
select emaj.emaj_protect_group('myGroup1');
 emaj_protect_group 
--------------------
                  0
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | t
(1 row)

-- stop should reset the protection
select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 f                | f
(1 row)

-----------------------------
-- emaj_unprotect_group() tests
-----------------------------
-- group is unknown
select emaj.emaj_unprotect_group(NULL);
ERROR:  emaj_unprotect_group: group "<NULL>" has not been created.
CONTEXT:  PL/pgSQL function emaj.emaj_unprotect_group(text) line 14 at RAISE
select emaj.emaj_unprotect_group('unknownGroup');
ERROR:  emaj_unprotect_group: group "unknownGroup" has not been created.
CONTEXT:  PL/pgSQL function emaj.emaj_unprotect_group(text) line 14 at RAISE
-- group is not rollbackable
select emaj.emaj_unprotect_group('phil''s group#3",');
ERROR:  emaj_unprotect_group: The group "phil's group#3"," cannot be unprotected because it is an AUDIT_ONLY group.
CONTEXT:  PL/pgSQL function emaj.emaj_unprotect_group(text) line 18 at RAISE
-- group is not in logging state
select emaj.emaj_unprotect_group('myGroup1');
 emaj_unprotect_group 
----------------------
                    0
(1 row)

-- should be ok
select emaj.emaj_start_group('myGroup1','M1');
 emaj_start_group 
------------------
                6
(1 row)

select emaj.emaj_protect_group('myGroup1');
 emaj_protect_group 
--------------------
                  1
(1 row)

select emaj.emaj_unprotect_group('myGroup1');
 emaj_unprotect_group 
----------------------
                    1
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | f
(1 row)

-- unprotect an already unprotected group
select emaj.emaj_unprotect_group('myGroup1');
 emaj_unprotect_group 
----------------------
                    0
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 t                | f
(1 row)

select emaj.emaj_stop_group('myGroup1');
 emaj_stop_group 
-----------------
               6
(1 row)

select group_is_logging, group_is_rlbk_protected from emaj.emaj_group where group_name = 'myGroup1';
 group_is_logging | group_is_rlbk_protected 
------------------+-------------------------
 f                | f
(1 row)

-- test end: (groups are stopped) reset history and force sequences id
select hist_id, hist_function, hist_event, hist_object, 
  case when hist_function = 'PURGE_HISTORY' then regexp_replace(hist_wording,'14(4|6)','<144|146>')
    else regexp_replace(regexp_replace(hist_wording,E'\\d\\d\.\\d\\d\\.\\d\\d\\.\\d\\d\\d','%','g'),E'\\[.+\\]','(timestamp)','g') end,
  hist_user from emaj.emaj_hist order by hist_id;
 hist_id |  hist_function   | hist_event |                  hist_object                  |          regexp_replace          | hist_user 
---------+------------------+------------+-----------------------------------------------+----------------------------------+-----------
    2032 | START_GROUP      | BEGIN      | myGroup1                                      | With log reset                   | postgres
    2033 | PURGE_HISTORY    |            |                                               | <144|146> emaj_hist rows deleted | postgres
    2034 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2035 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2036 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | Mark1                            | postgres
    2037 | SET_MARK_GROUP   | END        | myGroup1                                      | Mark1                            | postgres
    2038 | START_GROUP      | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2039 | START_GROUP      | BEGIN      | myGroup2                                      | With log reset                   | postgres
    2040 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2041 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2042 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | Mark2                            | postgres
    2043 | SET_MARK_GROUP   | END        | myGroup2                                      | Mark2                            | postgres
    2044 | START_GROUP      | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2045 | START_GROUP      | BEGIN      | phil's group#3",                              | Without log reset                | postgres
    2046 | LOCK_GROUP       | BEGIN      | phil's group#3",                              |                                  | postgres
    2047 | LOCK_GROUP       | END        | phil's group#3",                              | 2 tables locked, 0 deadlock(s)   | postgres
    2048 | SET_MARK_GROUP   | BEGIN      | phil's group#3",                              | Mark3                            | postgres
    2049 | SET_MARK_GROUP   | END        | phil's group#3",                              | Mark3                            | postgres
    2050 | START_GROUP      | END        | phil's group#3",                              | 4 tables/sequences processed     | postgres
    2051 | STOP_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2052 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2053 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2054 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | STOP_%                           | postgres
    2055 | SET_MARK_GROUP   | END        | myGroup1                                      | STOP_%                           | postgres
    2056 | STOP_GROUP       | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2057 | STOP_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2058 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2059 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2060 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | STOP_%                           | postgres
    2061 | SET_MARK_GROUP   | END        | myGroup2                                      | STOP_%                           | postgres
    2062 | STOP_GROUP       | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2069 | START_GROUP      | BEGIN      | myGroup1                                      | With log reset                   | postgres
    2070 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2071 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2072 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | %abc%                            | postgres
    2073 | SET_MARK_GROUP   | END        | myGroup1                                      | %abc%                            | postgres
    2074 | START_GROUP      | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2075 | START_GROUP      | BEGIN      | myGroup2                                      | Without log reset                | postgres
    2076 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2077 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2078 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | START_%                          | postgres
    2079 | SET_MARK_GROUP   | END        | myGroup2                                      | START_%                          | postgres
    2080 | START_GROUP      | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2091 | STOP_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2092 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2093 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2094 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | STOP_%                           | postgres
    2095 | SET_MARK_GROUP   | END        | myGroup1                                      | STOP_%                           | postgres
    2096 | STOP_GROUP       | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2097 | STOP_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2098 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2099 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2100 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | Stop mark                        | postgres
    2101 | SET_MARK_GROUP   | END        | myGroup2                                      | Stop mark                        | postgres
    2102 | STOP_GROUP       | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2103 | STOP_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2104 | STOP_GROUP       | END        | myGroup2                                      | 0 tables/sequences processed     | postgres
    2105 | STOP_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2106 | STOP_GROUP       | END        | myGroup2                                      | 0 tables/sequences processed     | postgres
    2107 | START_GROUP      | BEGIN      | myGroup1                                      | With log reset                   | postgres
    2108 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2109 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2110 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | START_%                          | postgres
    2111 | SET_MARK_GROUP   | END        | myGroup1                                      | START_%                          | postgres
    2112 | START_GROUP      | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2113 | START_GROUP      | BEGIN      | myGroup2                                      | With log reset                   | postgres
    2114 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2115 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2116 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | START_%                          | postgres
    2117 | SET_MARK_GROUP   | END        | myGroup2                                      | START_%                          | postgres
    2118 | START_GROUP      | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2119 | STOP_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2120 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2121 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2122 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | STOP_%                           | postgres
    2123 | SET_MARK_GROUP   | END        | myGroup1                                      | STOP_%                           | postgres
    2124 | STOP_GROUP       | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2125 | STOP_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2126 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2127 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2128 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | STOP_%                           | postgres
    2129 | SET_MARK_GROUP   | END        | myGroup2                                      | STOP_%                           | postgres
    2130 | STOP_GROUP       | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2131 | START_GROUP      | BEGIN      | myGroup1                                      | With log reset                   | postgres
    2132 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2133 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2134 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | Foo%Bar                          | postgres
    2135 | SET_MARK_GROUP   | END        | myGroup1                                      | Foo%Bar                          | postgres
    2136 | START_GROUP      | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2137 | STOP_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2138 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2139 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2140 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | STOP_%                           | postgres
    2141 | SET_MARK_GROUP   | END        | myGroup1                                      | STOP_%                           | postgres
    2142 | STOP_GROUP       | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2143 | START_GROUPS     | BEGIN      |                                               | Without log reset                | postgres
    2144 | START_GROUPS     | END        |                                               | 0 tables/sequences processed     | postgres
    2145 | START_GROUPS     | BEGIN      |                                               | With log reset                   | postgres
    2146 | START_GROUPS     | END        |                                               | 0 tables/sequences processed     | postgres
    2150 | START_GROUP      | BEGIN      | myGroup2                                      | With log reset                   | postgres
    2151 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2152 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2153 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | Mark1                            | postgres
    2154 | SET_MARK_GROUP   | END        | myGroup2                                      | Mark1                            | postgres
    2155 | START_GROUP      | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2157 | STOP_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2158 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2159 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2160 | SET_MARK_GROUP   | BEGIN      | myGroup2                                      | STOP_%                           | postgres
    2161 | SET_MARK_GROUP   | END        | myGroup2                                      | STOP_%                           | postgres
    2162 | STOP_GROUP       | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2170 | START_GROUPS     | BEGIN      | myGroup1,myGroup2                             | With log reset                   | postgres
    2171 | LOCK_GROUPS      | BEGIN      | myGroup1,myGroup2                             |                                  | postgres
    2172 | LOCK_GROUPS      | END        | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)  | postgres
    2173 | SET_MARK_GROUPS  | BEGIN      | myGroup1,myGroup2                             | Mark1                            | postgres
    2174 | SET_MARK_GROUPS  | END        | myGroup1,myGroup2                             | Mark1                            | postgres
    2175 | START_GROUPS     | END        | myGroup1,myGroup2                             | 14 tables/sequences processed    | postgres
    2176 | STOP_GROUPS      | BEGIN      |                                               |                                  | postgres
    2177 | STOP_GROUPS      | END        |                                               | 0 tables/sequences processed     | postgres
    2178 | STOP_GROUPS      | BEGIN      |                                               |                                  | postgres
    2179 | STOP_GROUPS      | END        |                                               | 0 tables/sequences processed     | postgres
    2185 | STOP_GROUPS      | BEGIN      | myGroup1,myGroup2                             |                                  | postgres
    2186 | LOCK_GROUPS      | BEGIN      | myGroup1,myGroup2                             |                                  | postgres
    2187 | LOCK_GROUPS      | END        | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)  | postgres
    2188 | SET_MARK_GROUPS  | BEGIN      | myGroup1,myGroup2                             | Global Stop at %                 | postgres
    2189 | SET_MARK_GROUPS  | END        | myGroup1,myGroup2                             | Global Stop at %                 | postgres
    2190 | STOP_GROUPS      | END        | myGroup1,myGroup2                             | 14 tables/sequences processed    | postgres
    2191 | STOP_GROUPS      | BEGIN      | myGroup1,myGroup2,,myGroup2,myGroup2,myGroup1 |                                  | postgres
    2192 | STOP_GROUPS      | END        | myGroup1,myGroup2,,myGroup2,myGroup2,myGroup1 | 0 tables/sequences processed     | postgres
    2193 | START_GROUPS     | BEGIN      | myGroup1,myGroup2                             | With log reset                   | postgres
    2194 | LOCK_GROUPS      | BEGIN      | myGroup1,myGroup2                             |                                  | postgres
    2195 | LOCK_GROUPS      | END        | myGroup1,myGroup2                             | 11 tables locked, 0 deadlock(s)  | postgres
    2196 | SET_MARK_GROUPS  | BEGIN      | myGroup1,myGroup2                             | Mark1                            | postgres
    2197 | SET_MARK_GROUPS  | END        | myGroup1,myGroup2                             | Mark1                            | postgres
    2198 | START_GROUPS     | END        | myGroup1,myGroup2                             | 14 tables/sequences processed    | postgres
    2217 | FORCE_STOP_GROUP | BEGIN      | myGroup2                                      |                                  | postgres
    2218 | LOCK_GROUP       | BEGIN      | myGroup2                                      |                                  | postgres
    2219 | LOCK_GROUP       | END        | myGroup2                                      | 6 tables locked, 0 deadlock(s)   | postgres
    2220 | FORCE_STOP_GROUP | END        | myGroup2                                      | 8 tables/sequences processed     | postgres
    2221 | FORCE_STOP_GROUP | BEGIN      | myGroup1                                      |                                  | postgres
    2222 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2223 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2224 | FORCE_STOP_GROUP | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2225 | FORCE_STOP_GROUP | BEGIN      | myGroup2                                      |                                  | postgres
    2226 | FORCE_STOP_GROUP | END        | myGroup2                                      | 0 tables/sequences processed     | postgres
    2227 | START_GROUP      | BEGIN      | myGroup1                                      | With log reset                   | postgres
    2228 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2229 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2230 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | M1                               | postgres
    2231 | SET_MARK_GROUP   | END        | myGroup1                                      | M1                               | postgres
    2232 | START_GROUP      | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2233 | PROTECT_GROUP    |            | myGroup1                                      | Status 1                         | postgres
    2234 | PROTECT_GROUP    |            | myGroup1                                      | Status 0                         | postgres
    2235 | STOP_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2236 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2237 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2238 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | STOP_%                           | postgres
    2239 | SET_MARK_GROUP   | END        | myGroup1                                      | STOP_%                           | postgres
    2240 | STOP_GROUP       | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2241 | UNPROTECT_GROUP  |            | myGroup1                                      | Status 0                         | postgres
    2242 | START_GROUP      | BEGIN      | myGroup1                                      | With log reset                   | postgres
    2243 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2244 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2245 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | M1                               | postgres
    2246 | SET_MARK_GROUP   | END        | myGroup1                                      | M1                               | postgres
    2247 | START_GROUP      | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
    2248 | PROTECT_GROUP    |            | myGroup1                                      | Status 1                         | postgres
    2249 | UNPROTECT_GROUP  |            | myGroup1                                      | Status 1                         | postgres
    2250 | UNPROTECT_GROUP  |            | myGroup1                                      | Status 0                         | postgres
    2251 | STOP_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2252 | LOCK_GROUP       | BEGIN      | myGroup1                                      |                                  | postgres
    2253 | LOCK_GROUP       | END        | myGroup1                                      | 5 tables locked, 0 deadlock(s)   | postgres
    2254 | SET_MARK_GROUP   | BEGIN      | myGroup1                                      | STOP_%                           | postgres
    2255 | SET_MARK_GROUP   | END        | myGroup1                                      | STOP_%                           | postgres
    2256 | STOP_GROUP       | END        | myGroup1                                      | 6 tables/sequences processed     | postgres
(175 rows)

truncate emaj.emaj_hist;
alter sequence emaj.emaj_hist_hist_id_seq restart 3000;
alter sequence emaj.emaj_time_stamp_time_id_seq restart 300;
alter sequence emaj.emaj_mark_mark_id_seq restart 300;
